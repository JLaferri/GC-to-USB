
Arduino-joystick.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000fa2  00001036  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fa2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a2  0080010e  0080010e  00001044  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  00001044  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000184  00000000  00000000  00001adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000430  00000000  00000000  00001c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000bd3  00000000  00000000  00002090  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000069fb  00000000  00000000  00002c63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001896  00000000  00000000  0000965e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000592f  00000000  00000000  0000aef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000660  00000000  00000000  00010824  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002924  00000000  00000000  00010e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003433  00000000  00000000  000137a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000b14  00000000  00000000  00016bdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000408  00000000  00000000  000176ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	9b c0       	rjmp	.+310    	; 0x138 <__ctors_end>
   2:	00 00       	nop
   4:	b4 c0       	rjmp	.+360    	; 0x16e <__bad_interrupt>
   6:	00 00       	nop
   8:	b2 c0       	rjmp	.+356    	; 0x16e <__bad_interrupt>
   a:	00 00       	nop
   c:	b0 c0       	rjmp	.+352    	; 0x16e <__bad_interrupt>
   e:	00 00       	nop
  10:	ae c0       	rjmp	.+348    	; 0x16e <__bad_interrupt>
  12:	00 00       	nop
  14:	ac c0       	rjmp	.+344    	; 0x16e <__bad_interrupt>
  16:	00 00       	nop
  18:	aa c0       	rjmp	.+340    	; 0x16e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	a8 c0       	rjmp	.+336    	; 0x16e <__bad_interrupt>
  1e:	00 00       	nop
  20:	a6 c0       	rjmp	.+332    	; 0x16e <__bad_interrupt>
  22:	00 00       	nop
  24:	a4 c0       	rjmp	.+328    	; 0x16e <__bad_interrupt>
  26:	00 00       	nop
  28:	a2 c0       	rjmp	.+324    	; 0x16e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	d9 c3       	rjmp	.+1970   	; 0x7e0 <__vector_11>
  2e:	00 00       	nop
  30:	9e c0       	rjmp	.+316    	; 0x16e <__bad_interrupt>
  32:	00 00       	nop
  34:	9c c0       	rjmp	.+312    	; 0x16e <__bad_interrupt>
  36:	00 00       	nop
  38:	9a c0       	rjmp	.+308    	; 0x16e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	98 c0       	rjmp	.+304    	; 0x16e <__bad_interrupt>
  3e:	00 00       	nop
  40:	96 c0       	rjmp	.+300    	; 0x16e <__bad_interrupt>
  42:	00 00       	nop
  44:	94 c0       	rjmp	.+296    	; 0x16e <__bad_interrupt>
  46:	00 00       	nop
  48:	92 c0       	rjmp	.+292    	; 0x16e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	90 c0       	rjmp	.+288    	; 0x16e <__bad_interrupt>
  4e:	00 00       	nop
  50:	8e c0       	rjmp	.+284    	; 0x16e <__bad_interrupt>
  52:	00 00       	nop
  54:	8c c0       	rjmp	.+280    	; 0x16e <__bad_interrupt>
  56:	00 00       	nop
  58:	8a c0       	rjmp	.+276    	; 0x16e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	41 c1       	rjmp	.+642    	; 0x2e0 <__vector_23>
  5e:	00 00       	nop
  60:	86 c0       	rjmp	.+268    	; 0x16e <__bad_interrupt>
  62:	00 00       	nop
  64:	84 c0       	rjmp	.+264    	; 0x16e <__bad_interrupt>
  66:	00 00       	nop
  68:	82 c0       	rjmp	.+260    	; 0x16e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	80 c0       	rjmp	.+256    	; 0x16e <__bad_interrupt>
  6e:	00 00       	nop
  70:	7e c0       	rjmp	.+252    	; 0x16e <__bad_interrupt>
  72:	00 00       	nop
  74:	7c c0       	rjmp	.+248    	; 0x16e <__bad_interrupt>
  76:	00 00       	nop
  78:	7a c0       	rjmp	.+244    	; 0x16e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	78 c0       	rjmp	.+240    	; 0x16e <__bad_interrupt>
  7e:	00 00       	nop
  80:	76 c0       	rjmp	.+236    	; 0x16e <__bad_interrupt>
  82:	00 00       	nop
  84:	74 c0       	rjmp	.+232    	; 0x16e <__bad_interrupt>
  86:	00 00       	nop
  88:	72 c0       	rjmp	.+228    	; 0x16e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	70 c0       	rjmp	.+224    	; 0x16e <__bad_interrupt>
  8e:	00 00       	nop
  90:	6e c0       	rjmp	.+220    	; 0x16e <__bad_interrupt>
  92:	00 00       	nop
  94:	6c c0       	rjmp	.+216    	; 0x16e <__bad_interrupt>
  96:	00 00       	nop

00000098 <JoystickReport>:
  98:	05 01 09 05 a1 01 a1 00 05 09 19 01 29 10 15 00     ............)...
  a8:	25 01 95 10 75 01 81 02 05 01 09 30 09 31 09 33     %...u......0.1.3
  b8:	09 34 09 35 09 36 15 00 26 ff 00 75 08 95 06 81     .4.5.6..&..u....
  c8:	02 c0 c0                                            ...

000000cb <DeviceDescriptor>:
  cb:	12 01 10 01 00 00 00 08 eb 03 43 20 00 00 01 02     ..........C ....
  db:	00 01                                               ..

000000dd <ConfigurationDescriptor>:
  dd:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
  ed:	00 00 09 21 11 01 00 01 22 33 00 07 05 81 03 08     ...!...."3......
  fd:	00 07                                               ..

000000ff <LanguageString>:
  ff:	04 03 09 04                                         ....

00000103 <ManufacturerString>:
 103:	0c 03 46 00 69 00 7a 00 7a 00 69 00 00 00           ..F.i.z.z.i...

00000111 <ProductString>:
 111:	24 03 46 00 69 00 7a 00 7a 00 69 00 27 00 73 00     $.F.i.z.z.i.'.s.
 121:	20 00 47 00 43 00 20 00 74 00 6f 00 20 00 55 00      .G.C. .t.o. .U.
 131:	53 00 42 00 00 00 00                                S.B....

00000138 <__ctors_end>:
 138:	11 24       	eor	r1, r1
 13a:	1f be       	out	0x3f, r1	; 63
 13c:	cf ef       	ldi	r28, 0xFF	; 255
 13e:	d2 e0       	ldi	r29, 0x02	; 2
 140:	de bf       	out	0x3e, r29	; 62
 142:	cd bf       	out	0x3d, r28	; 61

00000144 <__do_copy_data>:
 144:	11 e0       	ldi	r17, 0x01	; 1
 146:	a0 e0       	ldi	r26, 0x00	; 0
 148:	b1 e0       	ldi	r27, 0x01	; 1
 14a:	e2 ea       	ldi	r30, 0xA2	; 162
 14c:	ff e0       	ldi	r31, 0x0F	; 15
 14e:	02 c0       	rjmp	.+4      	; 0x154 <__do_copy_data+0x10>
 150:	05 90       	lpm	r0, Z+
 152:	0d 92       	st	X+, r0
 154:	ae 30       	cpi	r26, 0x0E	; 14
 156:	b1 07       	cpc	r27, r17
 158:	d9 f7       	brne	.-10     	; 0x150 <__do_copy_data+0xc>

0000015a <__do_clear_bss>:
 15a:	11 e0       	ldi	r17, 0x01	; 1
 15c:	ae e0       	ldi	r26, 0x0E	; 14
 15e:	b1 e0       	ldi	r27, 0x01	; 1
 160:	01 c0       	rjmp	.+2      	; 0x164 <.do_clear_bss_start>

00000162 <.do_clear_bss_loop>:
 162:	1d 92       	st	X+, r1

00000164 <.do_clear_bss_start>:
 164:	a0 3b       	cpi	r26, 0xB0	; 176
 166:	b1 07       	cpc	r27, r17
 168:	e1 f7       	brne	.-8      	; 0x162 <.do_clear_bss_loop>
 16a:	2c d0       	rcall	.+88     	; 0x1c4 <main>
 16c:	18 c7       	rjmp	.+3632   	; 0xf9e <_exit>

0000016e <__bad_interrupt>:
 16e:	48 cf       	rjmp	.-368    	; 0x0 <__vectors>

00000170 <SetupHardware>:
    }
}

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
 174:	84 b7       	in	r24, 0x34	; 52
 176:	87 7f       	andi	r24, 0xF7	; 247
 178:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
 17a:	28 e1       	ldi	r18, 0x18	; 24
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	f8 94       	cli
 180:	20 93 60 00 	sts	0x0060, r18
 184:	10 92 60 00 	sts	0x0060, r1
 188:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
 18a:	80 e1       	ldi	r24, 0x10	; 16
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	90 93 cd 00 	sts	0x00CD, r25
 192:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
 196:	86 e0       	ldi	r24, 0x06	; 6
 198:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
 19c:	82 e0       	ldi	r24, 0x02	; 2
 19e:	80 93 c8 00 	sts	0x00C8, r24
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
 1a2:	c9 ec       	ldi	r28, 0xC9	; 201
 1a4:	d0 e0       	ldi	r29, 0x00	; 0
 1a6:	28 83       	st	Y, r18
				
				DDRD  |= (1 << 3);
 1a8:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
 1aa:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |= LEDS_ALL_LEDS;
 1ac:	8a b1       	in	r24, 0x0a	; 10
 1ae:	80 63       	ori	r24, 0x30	; 48
 1b0:	8a b9       	out	0x0a, r24	; 10
				PORTD |= LEDS_ALL_LEDS;
 1b2:	8b b1       	in	r24, 0x0b	; 11
 1b4:	80 63       	ori	r24, 0x30	; 48
 1b6:	8b b9       	out	0x0b, r24	; 11

    /* Hardware Initialization */
    Serial_Init(115200, true);
    LEDs_Init();
    USB_Init();
 1b8:	08 d3       	rcall	.+1552   	; 0x7ca <USB_Init>

    UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
 1ba:	88 e9       	ldi	r24, 0x98	; 152
 1bc:	88 83       	st	Y, r24
}
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
    SetupHardware();
 1c4:	d5 df       	rcall	.-86     	; 0x170 <SetupHardware>
		 *
		 *  \param[out] Buffer  Pointer to a ring buffer structure to initialize
		 */
		static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
		{
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 1c6:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 1c8:	f8 94       	cli
			{
				Buffer->In  = Buffer->Buffer;
 1ca:	80 e2       	ldi	r24, 0x20	; 32
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	90 93 a1 01 	sts	0x01A1, r25
 1d2:	80 93 a0 01 	sts	0x01A0, r24
				Buffer->Out = Buffer->Buffer;
 1d6:	90 93 a3 01 	sts	0x01A3, r25
 1da:	80 93 a2 01 	sts	0x01A2, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 1de:	2f bf       	out	0x3f, r18	; 63

    RingBuffer_InitBuffer(&USARTtoUSB_Buffer);

    sei();
 1e0:	78 94       	sei

    for (;;) {
	HID_Device_USBTask(&Joystick_HID_Interface);
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	05 d6       	rcall	.+3082   	; 0xdf2 <HID_Device_USBTask>
	USB_USBTask();
 1e8:	a2 d4       	rcall	.+2372   	; 0xb2e <USB_USBTask>

	/* Turn off the Tx LED when the tick count reaches zero */
	if (led1_ticks) {
 1ea:	80 91 16 01 	lds	r24, 0x0116
 1ee:	90 91 17 01 	lds	r25, 0x0117
 1f2:	00 97       	sbiw	r24, 0x00	; 0
 1f4:	b1 f3       	breq	.-20     	; 0x1e2 <main+0x1e>
	    led1_ticks--;
 1f6:	80 91 16 01 	lds	r24, 0x0116
 1fa:	90 91 17 01 	lds	r25, 0x0117
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	90 93 17 01 	sts	0x0117, r25
 204:	80 93 16 01 	sts	0x0116, r24
	    if (led1_ticks == 0) {
 208:	80 91 16 01 	lds	r24, 0x0116
 20c:	90 91 17 01 	lds	r25, 0x0117
 210:	00 97       	sbiw	r24, 0x00	; 0
 212:	39 f7       	brne	.-50     	; 0x1e2 <main+0x1e>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
			{
				PORTD |= LEDMask;
 214:	5d 9a       	sbi	0x0b, 5	; 11
 216:	e5 cf       	rjmp	.-54     	; 0x1e2 <main+0x1e>

00000218 <EVENT_USB_Device_Connect>:

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	//LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
 218:	08 95       	ret

0000021a <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
}
 21a:	08 95       	ret

0000021c <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
    HID_Device_ConfigureEndpoints(&Joystick_HID_Interface);
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	91 e0       	ldi	r25, 0x01	; 1
 220:	c0 d5       	rcall	.+2944   	; 0xda2 <HID_Device_ConfigureEndpoints>
			 *  at the start of each USB frame when enumerated in device mode.
			 */
			static inline void USB_Device_EnableSOFEvents(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableSOFEvents(void)
			{
				USB_INT_Enable(USB_INT_SOFI);
 222:	e2 ee       	ldi	r30, 0xE2	; 226
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	80 81       	ld	r24, Z
 228:	84 60       	ori	r24, 0x04	; 4
 22a:	80 83       	st	Z, r24

    USB_Device_EnableSOFEvents();
}
 22c:	08 95       	ret

0000022e <EVENT_USB_Device_UnhandledControlRequest>:

/** Event handler for the library USB Unhandled Control Request event. */
void EVENT_USB_Device_UnhandledControlRequest(void)
{
    HID_Device_ProcessControlRequest(&Joystick_HID_Interface);
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	91 e0       	ldi	r25, 0x01	; 1
}
 232:	8f c4       	rjmp	.+2334   	; 0xb52 <HID_Device_ProcessControlRequest>

00000234 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
 234:	80 91 0b 01 	lds	r24, 0x010B
 238:	90 91 0c 01 	lds	r25, 0x010C
 23c:	00 97       	sbiw	r24, 0x00	; 0
 23e:	29 f0       	breq	.+10     	; 0x24a <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	90 93 0c 01 	sts	0x010C, r25
 246:	80 93 0b 01 	sts	0x010B, r24
 24a:	08 95       	ret

0000024c <CALLBACK_HID_Device_CreateHIDReport>:
    USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
    uint8_t* const ReportID,
    const uint8_t ReportType,
    void* ReportData,
    uint16_t* const ReportSize)
{
 24c:	0f 93       	push	r16
 24e:	1f 93       	push	r17
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
 254:	e8 01       	movw	r28, r16
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;
			
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 256:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 258:	f8 94       	cli
			{
				Count = Buffer->Count;
 25a:	80 91 a4 01 	lds	r24, 0x01A4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 25e:	9f bf       	out	0x3f, r25	; 63
    USB_JoystickReport_Data_t *reportp = (USB_JoystickReport_Data_t*)ReportData;

    RingBuff_Count_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);

    if (BufferCount >= (sizeof(joyReport))) {
 260:	88 30       	cpi	r24, 0x08	; 8
 262:	48 f1       	brcs	.+82     	; 0x2b6 <CALLBACK_HID_Device_CreateHIDReport+0x6a>
 264:	ae e0       	ldi	r26, 0x0E	; 14
 266:	b1 e0       	ldi	r27, 0x01	; 1
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
			  Buffer->Out = Buffer->Buffer;
 268:	80 e2       	ldi	r24, 0x20	; 32
 26a:	91 e0       	ldi	r25, 0x01	; 1
		 *
		 *  \return Next data element stored in the buffer
		 */
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;
 26c:	e0 91 a2 01 	lds	r30, 0x01A2
 270:	f0 91 a3 01 	lds	r31, 0x01A3
 274:	51 91       	ld	r21, Z+
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
 276:	f0 93 a3 01 	sts	0x01A3, r31
 27a:	e0 93 a2 01 	sts	0x01A2, r30
 27e:	41 e0       	ldi	r20, 0x01	; 1
 280:	e0 3a       	cpi	r30, 0xA0	; 160
 282:	f4 07       	cpc	r31, r20
 284:	21 f4       	brne	.+8      	; 0x28e <CALLBACK_HID_Device_CreateHIDReport+0x42>
			  Buffer->Out = Buffer->Buffer;
 286:	90 93 a3 01 	sts	0x01A3, r25
 28a:	80 93 a2 01 	sts	0x01A2, r24

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 28e:	6f b7       	in	r22, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 290:	f8 94       	cli
			{
				Buffer->Count--;
 292:	40 91 a4 01 	lds	r20, 0x01A4
 296:	41 50       	subi	r20, 0x01	; 1
 298:	40 93 a4 01 	sts	0x01A4, r20
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 29c:	6f bf       	out	0x3f, r22	; 63
	uint8_t ind;
	for (ind=0; ind<sizeof(joyReport); ind++) {
	    ((uint8_t *)&joyReport)[ind] = RingBuffer_Remove(&USARTtoUSB_Buffer);
 29e:	5d 93       	st	X+, r21

    RingBuff_Count_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);

    if (BufferCount >= (sizeof(joyReport))) {
	uint8_t ind;
	for (ind=0; ind<sizeof(joyReport); ind++) {
 2a0:	41 e0       	ldi	r20, 0x01	; 1
 2a2:	a6 31       	cpi	r26, 0x16	; 22
 2a4:	b4 07       	cpc	r27, r20
 2a6:	11 f7       	brne	.-60     	; 0x26c <CALLBACK_HID_Device_CreateHIDReport+0x20>
				PORTD |= LEDS_ALL_LEDS;
			}
			
			static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
			{
				PORTD &= ~LEDMask;
 2a8:	5d 98       	cbi	0x0b, 5	; 11
	    ((uint8_t *)&joyReport)[ind] = RingBuffer_Remove(&USARTtoUSB_Buffer);
	}

	LEDs_TurnOnLEDs(LEDS_LED1);
	led1_ticks = LED_ON_TICKS;
 2aa:	80 ed       	ldi	r24, 0xD0	; 208
 2ac:	97 e0       	ldi	r25, 0x07	; 7
 2ae:	90 93 17 01 	sts	0x0117, r25
 2b2:	80 93 16 01 	sts	0x0116, r24
    }

    *reportp = joyReport;
 2b6:	82 2f       	mov	r24, r18
 2b8:	93 2f       	mov	r25, r19
 2ba:	dc 01       	movw	r26, r24
 2bc:	ee e0       	ldi	r30, 0x0E	; 14
 2be:	f1 e0       	ldi	r31, 0x01	; 1
 2c0:	88 e0       	ldi	r24, 0x08	; 8
 2c2:	01 90       	ld	r0, Z+
 2c4:	0d 92       	st	X+, r0
 2c6:	81 50       	subi	r24, 0x01	; 1
 2c8:	e1 f7       	brne	.-8      	; 0x2c2 <CALLBACK_HID_Device_CreateHIDReport+0x76>

    *ReportSize = sizeof(USB_JoystickReport_Data_t);
 2ca:	88 e0       	ldi	r24, 0x08	; 8
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	99 83       	std	Y+1, r25	; 0x01
 2d0:	88 83       	st	Y, r24
    return false;
}
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	df 91       	pop	r29
 2d6:	cf 91       	pop	r28
 2d8:	1f 91       	pop	r17
 2da:	0f 91       	pop	r16
 2dc:	08 95       	ret

000002de <CALLBACK_HID_Device_ProcessHIDReport>:
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
    /* Not used but must be present */
}
 2de:	08 95       	ret

000002e0 <__vector_23>:

/** ISR to manage the reception of data from the serial port, placing received bytes into a circular buffer
 *  for later transmission to the host.
 */
ISR(USART1_RX_vect, ISR_BLOCK)
{
 2e0:	1f 92       	push	r1
 2e2:	0f 92       	push	r0
 2e4:	0f b6       	in	r0, 0x3f	; 63
 2e6:	0f 92       	push	r0
 2e8:	11 24       	eor	r1, r1
 2ea:	2f 93       	push	r18
 2ec:	8f 93       	push	r24
 2ee:	9f 93       	push	r25
 2f0:	ef 93       	push	r30
 2f2:	ff 93       	push	r31
    uint8_t ReceivedByte = UDR1;
 2f4:	80 91 ce 00 	lds	r24, 0x00CE

    if ((USB_DeviceState == DEVICE_STATE_Configured) &&
 2f8:	9e b3       	in	r25, 0x1e	; 30
 2fa:	94 30       	cpi	r25, 0x04	; 4
 2fc:	31 f5       	brne	.+76     	; 0x34a <__stack+0x4b>
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;
			
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 2fe:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 300:	f8 94       	cli
			{
				Count = Buffer->Count;
 302:	90 91 a4 01 	lds	r25, 0x01A4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 306:	2f bf       	out	0x3f, r18	; 63
 308:	90 38       	cpi	r25, 0x80	; 128
 30a:	f9 f0       	breq	.+62     	; 0x34a <__stack+0x4b>
		 *  \param[in]     Data    Data element to insert into the buffer
		 */
		static inline void RingBuffer_Insert(RingBuff_t* const Buffer,
		                                     const RingBuff_Data_t Data)
		{
			*Buffer->In = Data;
 30c:	e0 91 a0 01 	lds	r30, 0x01A0
 310:	f0 91 a1 01 	lds	r31, 0x01A1
 314:	80 83       	st	Z, r24
			
			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
 316:	e0 91 a0 01 	lds	r30, 0x01A0
 31a:	f0 91 a1 01 	lds	r31, 0x01A1
 31e:	cf 01       	movw	r24, r30
 320:	01 96       	adiw	r24, 0x01	; 1
 322:	90 93 a1 01 	sts	0x01A1, r25
 326:	80 93 a0 01 	sts	0x01A0, r24
 32a:	21 e0       	ldi	r18, 0x01	; 1
 32c:	80 3a       	cpi	r24, 0xA0	; 160
 32e:	92 07       	cpc	r25, r18
 330:	21 f4       	brne	.+8      	; 0x33a <__stack+0x3b>
			  Buffer->In = Buffer->Buffer;
 332:	80 e2       	ldi	r24, 0x20	; 32
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	92 83       	std	Z+2, r25	; 0x02
 338:	81 83       	std	Z+1, r24	; 0x01

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 33a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 33c:	f8 94       	cli
			{
				Buffer->Count++;
 33e:	80 91 a4 01 	lds	r24, 0x01A4
 342:	8f 5f       	subi	r24, 0xFF	; 255
 344:	80 93 a4 01 	sts	0x01A4, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 348:	9f bf       	out	0x3f, r25	; 63
	    !RingBuffer_IsFull(&USARTtoUSB_Buffer)) {
	RingBuffer_Insert(&USARTtoUSB_Buffer, ReceivedByte);
    }
}
 34a:	ff 91       	pop	r31
 34c:	ef 91       	pop	r30
 34e:	9f 91       	pop	r25
 350:	8f 91       	pop	r24
 352:	2f 91       	pop	r18
 354:	0f 90       	pop	r0
 356:	0f be       	out	0x3f, r0	; 63
 358:	0f 90       	pop	r0
 35a:	1f 90       	pop	r1
 35c:	18 95       	reti

0000035e <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 35e:	93 30       	cpi	r25, 0x03	; 3
 360:	89 f0       	breq	.+34     	; 0x384 <CALLBACK_USB_GetDescriptor+0x26>
 362:	94 30       	cpi	r25, 0x04	; 4
 364:	28 f4       	brcc	.+10     	; 0x370 <CALLBACK_USB_GetDescriptor+0x12>
 366:	91 30       	cpi	r25, 0x01	; 1
 368:	49 f1       	breq	.+82     	; 0x3bc <CALLBACK_USB_GetDescriptor+0x5e>
 36a:	92 30       	cpi	r25, 0x02	; 2
 36c:	61 f5       	brne	.+88     	; 0x3c6 <CALLBACK_USB_GetDescriptor+0x68>
 36e:	05 c0       	rjmp	.+10     	; 0x37a <CALLBACK_USB_GetDescriptor+0x1c>
 370:	91 32       	cpi	r25, 0x21	; 33
 372:	d1 f0       	breq	.+52     	; 0x3a8 <CALLBACK_USB_GetDescriptor+0x4a>
 374:	92 32       	cpi	r25, 0x22	; 34
 376:	39 f5       	brne	.+78     	; 0x3c6 <CALLBACK_USB_GetDescriptor+0x68>
 378:	1c c0       	rjmp	.+56     	; 0x3b2 <CALLBACK_USB_GetDescriptor+0x54>
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration: 
			Address = (void*)&ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 37a:	22 e2       	ldi	r18, 0x22	; 34
 37c:	30 e0       	ldi	r19, 0x00	; 0
		case DTYPE_Device:
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration: 
			Address = (void*)&ConfigurationDescriptor;
 37e:	ed ed       	ldi	r30, 0xDD	; 221
 380:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 382:	25 c0       	rjmp	.+74     	; 0x3ce <CALLBACK_USB_GetDescriptor+0x70>
		case DTYPE_String: 
			switch (DescriptorNumber)
 384:	81 30       	cpi	r24, 0x01	; 1
 386:	41 f0       	breq	.+16     	; 0x398 <CALLBACK_USB_GetDescriptor+0x3a>
 388:	81 30       	cpi	r24, 0x01	; 1
 38a:	18 f0       	brcs	.+6      	; 0x392 <CALLBACK_USB_GetDescriptor+0x34>
 38c:	82 30       	cpi	r24, 0x02	; 2
 38e:	d9 f4       	brne	.+54     	; 0x3c6 <CALLBACK_USB_GetDescriptor+0x68>
 390:	06 c0       	rjmp	.+12     	; 0x39e <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00: 
					Address = (void*)&LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 392:	ef ef       	ldi	r30, 0xFF	; 255
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	05 c0       	rjmp	.+10     	; 0x3a2 <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x01: 
					Address = (void*)&ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 398:	e3 e0       	ldi	r30, 0x03	; 3
 39a:	f1 e0       	ldi	r31, 0x01	; 1
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x02: 
					Address = (void*)&ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 39e:	e1 e1       	ldi	r30, 0x11	; 17
 3a0:	f1 e0       	ldi	r31, 0x01	; 1
 3a2:	24 91       	lpm	r18, Z
 3a4:	30 e0       	ldi	r19, 0x00	; 0
					break;
 3a6:	13 c0       	rjmp	.+38     	; 0x3ce <CALLBACK_USB_GetDescriptor+0x70>
			}
			
			break;
		case DTYPE_HID: 
			Address = (void*)&ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_t);
 3a8:	29 e0       	ldi	r18, 0x09	; 9
 3aa:	30 e0       	ldi	r19, 0x00	; 0
					break;
			}
			
			break;
		case DTYPE_HID: 
			Address = (void*)&ConfigurationDescriptor.HID_JoystickHID;
 3ac:	ef ee       	ldi	r30, 0xEF	; 239
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_HID_Descriptor_t);
			break;
 3b0:	0e c0       	rjmp	.+28     	; 0x3ce <CALLBACK_USB_GetDescriptor+0x70>
		case DTYPE_Report: 
			Address = (void*)&JoystickReport;
			Size    = sizeof(JoystickReport);
 3b2:	23 e3       	ldi	r18, 0x33	; 51
 3b4:	30 e0       	ldi	r19, 0x00	; 0
		case DTYPE_HID: 
			Address = (void*)&ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_t);
			break;
		case DTYPE_Report: 
			Address = (void*)&JoystickReport;
 3b6:	e8 e9       	ldi	r30, 0x98	; 152
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(JoystickReport);
			break;
 3ba:	09 c0       	rjmp	.+18     	; 0x3ce <CALLBACK_USB_GetDescriptor+0x70>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 3bc:	22 e1       	ldi	r18, 0x12	; 18
 3be:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = (void*)&DeviceDescriptor;
 3c0:	eb ec       	ldi	r30, 0xCB	; 203
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	04 c0       	rjmp	.+8      	; 0x3ce <CALLBACK_USB_GetDescriptor+0x70>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;
 3c6:	20 e0       	ldi	r18, 0x00	; 0
 3c8:	30 e0       	ldi	r19, 0x00	; 0
                                    void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
 3ca:	e0 e0       	ldi	r30, 0x00	; 0
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
			Address = (void*)&JoystickReport;
			Size    = sizeof(JoystickReport);
			break;
	}
	
	*DescriptorAddress = Address;
 3ce:	da 01       	movw	r26, r20
 3d0:	11 96       	adiw	r26, 0x01	; 1
 3d2:	fc 93       	st	X, r31
 3d4:	ee 93       	st	-X, r30
	return Size;
}
 3d6:	c9 01       	movw	r24, r18
 3d8:	08 95       	ret

000003da <Endpoint_BytesToEPSizeMaskDynamic>:
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 3da:	28 e0       	ldi	r18, 0x08	; 8
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	40 e0       	ldi	r20, 0x00	; 0
 3e0:	03 c0       	rjmp	.+6      	; 0x3e8 <Endpoint_BytesToEPSizeMaskDynamic+0xe>
 3e2:	4f 5f       	subi	r20, 0xFF	; 255
 3e4:	22 0f       	add	r18, r18
 3e6:	33 1f       	adc	r19, r19
 3e8:	28 17       	cp	r18, r24
 3ea:	39 07       	cpc	r19, r25
 3ec:	d0 f3       	brcs	.-12     	; 0x3e2 <Endpoint_BytesToEPSizeMaskDynamic+0x8>
 3ee:	84 2f       	mov	r24, r20
 3f0:	82 95       	swap	r24
 3f2:	80 7f       	andi	r24, 0xF0	; 240
 3f4:	08 95       	ret

000003f6 <Endpoint_ConfigureEndpoint_Prv>:
 3f6:	80 93 e9 00 	sts	0x00E9, r24
 3fa:	eb ee       	ldi	r30, 0xEB	; 235
 3fc:	f0 e0       	ldi	r31, 0x00	; 0
 3fe:	80 81       	ld	r24, Z
 400:	81 60       	ori	r24, 0x01	; 1
 402:	80 83       	st	Z, r24
 404:	ed ee       	ldi	r30, 0xED	; 237
 406:	f0 e0       	ldi	r31, 0x00	; 0
 408:	10 82       	st	Z, r1
 40a:	60 93 ec 00 	sts	0x00EC, r22
 40e:	40 83       	st	Z, r20
 410:	80 91 ee 00 	lds	r24, 0x00EE
 414:	88 1f       	adc	r24, r24
 416:	88 27       	eor	r24, r24
 418:	88 1f       	adc	r24, r24
 41a:	08 95       	ret

0000041c <Endpoint_ClearEndpoints>:
 41c:	10 92 f4 00 	sts	0x00F4, r1
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	80 93 e9 00 	sts	0x00E9, r24
 426:	10 92 f0 00 	sts	0x00F0, r1
 42a:	10 92 e8 00 	sts	0x00E8, r1
 42e:	10 92 ed 00 	sts	0x00ED, r1
 432:	90 91 eb 00 	lds	r25, 0x00EB
 436:	9e 7f       	andi	r25, 0xFE	; 254
 438:	90 93 eb 00 	sts	0x00EB, r25
 43c:	8f 5f       	subi	r24, 0xFF	; 255
 43e:	85 30       	cpi	r24, 0x05	; 5
 440:	81 f7       	brne	.-32     	; 0x422 <Endpoint_ClearEndpoints+0x6>
 442:	08 95       	ret

00000444 <Endpoint_ClearStatusStage>:
 444:	80 91 a8 01 	lds	r24, 0x01A8
 448:	87 ff       	sbrs	r24, 7
 44a:	11 c0       	rjmp	.+34     	; 0x46e <Endpoint_ClearStatusStage+0x2a>
 44c:	03 c0       	rjmp	.+6      	; 0x454 <Endpoint_ClearStatusStage+0x10>
 44e:	8e b3       	in	r24, 0x1e	; 30
 450:	88 23       	and	r24, r24
 452:	b1 f0       	breq	.+44     	; 0x480 <Endpoint_ClearStatusStage+0x3c>
 454:	80 91 e8 00 	lds	r24, 0x00E8
 458:	82 ff       	sbrs	r24, 2
 45a:	f9 cf       	rjmp	.-14     	; 0x44e <Endpoint_ClearStatusStage+0xa>
 45c:	80 91 e8 00 	lds	r24, 0x00E8
 460:	8b 77       	andi	r24, 0x7B	; 123
 462:	80 93 e8 00 	sts	0x00E8, r24
 466:	08 95       	ret
 468:	8e b3       	in	r24, 0x1e	; 30
 46a:	88 23       	and	r24, r24
 46c:	49 f0       	breq	.+18     	; 0x480 <Endpoint_ClearStatusStage+0x3c>
 46e:	80 91 e8 00 	lds	r24, 0x00E8
 472:	80 ff       	sbrs	r24, 0
 474:	f9 cf       	rjmp	.-14     	; 0x468 <Endpoint_ClearStatusStage+0x24>
 476:	80 91 e8 00 	lds	r24, 0x00E8
 47a:	8e 77       	andi	r24, 0x7E	; 126
 47c:	80 93 e8 00 	sts	0x00E8, r24
 480:	08 95       	ret

00000482 <Endpoint_WaitUntilReady>:
 482:	84 e6       	ldi	r24, 0x64	; 100
 484:	90 91 ec 00 	lds	r25, 0x00EC
 488:	90 ff       	sbrs	r25, 0
 48a:	05 c0       	rjmp	.+10     	; 0x496 <Endpoint_WaitUntilReady+0x14>
 48c:	90 91 e8 00 	lds	r25, 0x00E8
 490:	90 ff       	sbrs	r25, 0
 492:	05 c0       	rjmp	.+10     	; 0x49e <Endpoint_WaitUntilReady+0x1c>
 494:	1b c0       	rjmp	.+54     	; 0x4cc <Endpoint_WaitUntilReady+0x4a>
 496:	90 91 e8 00 	lds	r25, 0x00E8
 49a:	92 fd       	sbrc	r25, 2
 49c:	17 c0       	rjmp	.+46     	; 0x4cc <Endpoint_WaitUntilReady+0x4a>
 49e:	9e b3       	in	r25, 0x1e	; 30
 4a0:	99 23       	and	r25, r25
 4a2:	b1 f0       	breq	.+44     	; 0x4d0 <Endpoint_WaitUntilReady+0x4e>
 4a4:	9e b3       	in	r25, 0x1e	; 30
 4a6:	95 30       	cpi	r25, 0x05	; 5
 4a8:	a9 f0       	breq	.+42     	; 0x4d4 <Endpoint_WaitUntilReady+0x52>
 4aa:	90 91 eb 00 	lds	r25, 0x00EB
 4ae:	95 fd       	sbrc	r25, 5
 4b0:	13 c0       	rjmp	.+38     	; 0x4d8 <Endpoint_WaitUntilReady+0x56>
 4b2:	90 91 e1 00 	lds	r25, 0x00E1
 4b6:	92 ff       	sbrs	r25, 2
 4b8:	e5 cf       	rjmp	.-54     	; 0x484 <Endpoint_WaitUntilReady+0x2>
 4ba:	90 91 e1 00 	lds	r25, 0x00E1
 4be:	9b 7f       	andi	r25, 0xFB	; 251
 4c0:	90 93 e1 00 	sts	0x00E1, r25
 4c4:	88 23       	and	r24, r24
 4c6:	51 f0       	breq	.+20     	; 0x4dc <Endpoint_WaitUntilReady+0x5a>
 4c8:	81 50       	subi	r24, 0x01	; 1
 4ca:	dc cf       	rjmp	.-72     	; 0x484 <Endpoint_WaitUntilReady+0x2>
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	08 95       	ret
 4d0:	82 e0       	ldi	r24, 0x02	; 2
 4d2:	08 95       	ret
 4d4:	83 e0       	ldi	r24, 0x03	; 3
 4d6:	08 95       	ret
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	08 95       	ret
 4dc:	84 e0       	ldi	r24, 0x04	; 4
 4de:	08 95       	ret

000004e0 <Endpoint_Write_Stream_LE>:
 4e0:	af 92       	push	r10
 4e2:	bf 92       	push	r11
 4e4:	df 92       	push	r13
 4e6:	ef 92       	push	r14
 4e8:	ff 92       	push	r15
 4ea:	0f 93       	push	r16
 4ec:	1f 93       	push	r17
 4ee:	df 93       	push	r29
 4f0:	cf 93       	push	r28
 4f2:	0f 92       	push	r0
 4f4:	cd b7       	in	r28, 0x3d	; 61
 4f6:	de b7       	in	r29, 0x3e	; 62
 4f8:	08 2f       	mov	r16, r24
 4fa:	5b 01       	movw	r10, r22
 4fc:	7a 01       	movw	r14, r20
 4fe:	99 83       	std	Y+1, r25	; 0x01
 500:	c0 df       	rcall	.-128    	; 0x482 <Endpoint_WaitUntilReady>
 502:	d8 2e       	mov	r13, r24
 504:	99 81       	ldd	r25, Y+1	; 0x01
 506:	88 23       	and	r24, r24
 508:	31 f5       	brne	.+76     	; 0x556 <Endpoint_Write_Stream_LE+0x76>
 50a:	19 2f       	mov	r17, r25
 50c:	1c c0       	rjmp	.+56     	; 0x546 <Endpoint_Write_Stream_LE+0x66>
 50e:	80 91 e8 00 	lds	r24, 0x00E8
 512:	85 fd       	sbrc	r24, 5
 514:	10 c0       	rjmp	.+32     	; 0x536 <Endpoint_Write_Stream_LE+0x56>
 516:	80 91 e8 00 	lds	r24, 0x00E8
 51a:	8e 77       	andi	r24, 0x7E	; 126
 51c:	80 93 e8 00 	sts	0x00E8, r24
 520:	e1 14       	cp	r14, r1
 522:	f1 04       	cpc	r15, r1
 524:	21 f0       	breq	.+8      	; 0x52e <Endpoint_Write_Stream_LE+0x4e>
 526:	f7 01       	movw	r30, r14
 528:	09 95       	icall
 52a:	81 30       	cpi	r24, 0x01	; 1
 52c:	81 f0       	breq	.+32     	; 0x54e <Endpoint_Write_Stream_LE+0x6e>
 52e:	a9 df       	rcall	.-174    	; 0x482 <Endpoint_WaitUntilReady>
 530:	88 23       	and	r24, r24
 532:	49 f0       	breq	.+18     	; 0x546 <Endpoint_Write_Stream_LE+0x66>
 534:	0f c0       	rjmp	.+30     	; 0x554 <Endpoint_Write_Stream_LE+0x74>
 536:	f8 01       	movw	r30, r16
 538:	81 91       	ld	r24, Z+
 53a:	8f 01       	movw	r16, r30
 53c:	80 93 f1 00 	sts	0x00F1, r24
 540:	08 94       	sec
 542:	a1 08       	sbc	r10, r1
 544:	b1 08       	sbc	r11, r1
 546:	a1 14       	cp	r10, r1
 548:	b1 04       	cpc	r11, r1
 54a:	09 f7       	brne	.-62     	; 0x50e <Endpoint_Write_Stream_LE+0x2e>
 54c:	04 c0       	rjmp	.+8      	; 0x556 <Endpoint_Write_Stream_LE+0x76>
 54e:	75 e0       	ldi	r23, 0x05	; 5
 550:	d7 2e       	mov	r13, r23
 552:	01 c0       	rjmp	.+2      	; 0x556 <Endpoint_Write_Stream_LE+0x76>
 554:	d8 2e       	mov	r13, r24
 556:	8d 2d       	mov	r24, r13
 558:	0f 90       	pop	r0
 55a:	cf 91       	pop	r28
 55c:	df 91       	pop	r29
 55e:	1f 91       	pop	r17
 560:	0f 91       	pop	r16
 562:	ff 90       	pop	r15
 564:	ef 90       	pop	r14
 566:	df 90       	pop	r13
 568:	bf 90       	pop	r11
 56a:	af 90       	pop	r10
 56c:	08 95       	ret

0000056e <Endpoint_Write_Control_Stream_LE>:
 56e:	28 2f       	mov	r18, r24
 570:	39 2f       	mov	r19, r25
 572:	f9 01       	movw	r30, r18
 574:	80 91 ae 01 	lds	r24, 0x01AE
 578:	90 91 af 01 	lds	r25, 0x01AF
 57c:	86 17       	cp	r24, r22
 57e:	97 07       	cpc	r25, r23
 580:	18 f4       	brcc	.+6      	; 0x588 <Endpoint_Write_Control_Stream_LE+0x1a>
 582:	bc 01       	movw	r22, r24
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	32 c0       	rjmp	.+100    	; 0x5ec <Endpoint_Write_Control_Stream_LE+0x7e>
 588:	61 15       	cp	r22, r1
 58a:	71 05       	cpc	r23, r1
 58c:	d9 f7       	brne	.-10     	; 0x584 <Endpoint_Write_Control_Stream_LE+0x16>
 58e:	80 91 e8 00 	lds	r24, 0x00E8
 592:	8e 77       	andi	r24, 0x7E	; 126
 594:	80 93 e8 00 	sts	0x00E8, r24
 598:	f5 cf       	rjmp	.-22     	; 0x584 <Endpoint_Write_Control_Stream_LE+0x16>
 59a:	80 91 e8 00 	lds	r24, 0x00E8
 59e:	83 fd       	sbrc	r24, 3
 5a0:	37 c0       	rjmp	.+110    	; 0x610 <Endpoint_Write_Control_Stream_LE+0xa2>
 5a2:	80 91 e8 00 	lds	r24, 0x00E8
 5a6:	82 fd       	sbrc	r24, 2
 5a8:	2d c0       	rjmp	.+90     	; 0x604 <Endpoint_Write_Control_Stream_LE+0x96>
 5aa:	8e b3       	in	r24, 0x1e	; 30
 5ac:	88 23       	and	r24, r24
 5ae:	a1 f1       	breq	.+104    	; 0x618 <Endpoint_Write_Control_Stream_LE+0xaa>
 5b0:	8e b3       	in	r24, 0x1e	; 30
 5b2:	85 30       	cpi	r24, 0x05	; 5
 5b4:	79 f1       	breq	.+94     	; 0x614 <Endpoint_Write_Control_Stream_LE+0xa6>
 5b6:	80 91 e8 00 	lds	r24, 0x00E8
 5ba:	80 ff       	sbrs	r24, 0
 5bc:	17 c0       	rjmp	.+46     	; 0x5ec <Endpoint_Write_Control_Stream_LE+0x7e>
 5be:	80 91 f2 00 	lds	r24, 0x00F2
 5c2:	06 c0       	rjmp	.+12     	; 0x5d0 <Endpoint_Write_Control_Stream_LE+0x62>
 5c4:	91 91       	ld	r25, Z+
 5c6:	90 93 f1 00 	sts	0x00F1, r25
 5ca:	61 50       	subi	r22, 0x01	; 1
 5cc:	70 40       	sbci	r23, 0x00	; 0
 5ce:	8f 5f       	subi	r24, 0xFF	; 255
 5d0:	61 15       	cp	r22, r1
 5d2:	71 05       	cpc	r23, r1
 5d4:	11 f0       	breq	.+4      	; 0x5da <Endpoint_Write_Control_Stream_LE+0x6c>
 5d6:	88 30       	cpi	r24, 0x08	; 8
 5d8:	a8 f3       	brcs	.-22     	; 0x5c4 <Endpoint_Write_Control_Stream_LE+0x56>
 5da:	91 e0       	ldi	r25, 0x01	; 1
 5dc:	88 30       	cpi	r24, 0x08	; 8
 5de:	09 f0       	breq	.+2      	; 0x5e2 <Endpoint_Write_Control_Stream_LE+0x74>
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	80 91 e8 00 	lds	r24, 0x00E8
 5e6:	8e 77       	andi	r24, 0x7E	; 126
 5e8:	80 93 e8 00 	sts	0x00E8, r24
 5ec:	61 15       	cp	r22, r1
 5ee:	71 05       	cpc	r23, r1
 5f0:	a1 f6       	brne	.-88     	; 0x59a <Endpoint_Write_Control_Stream_LE+0x2c>
 5f2:	99 23       	and	r25, r25
 5f4:	91 f6       	brne	.-92     	; 0x59a <Endpoint_Write_Control_Stream_LE+0x2c>
 5f6:	06 c0       	rjmp	.+12     	; 0x604 <Endpoint_Write_Control_Stream_LE+0x96>
 5f8:	8e b3       	in	r24, 0x1e	; 30
 5fa:	88 23       	and	r24, r24
 5fc:	69 f0       	breq	.+26     	; 0x618 <Endpoint_Write_Control_Stream_LE+0xaa>
 5fe:	8e b3       	in	r24, 0x1e	; 30
 600:	85 30       	cpi	r24, 0x05	; 5
 602:	61 f0       	breq	.+24     	; 0x61c <Endpoint_Write_Control_Stream_LE+0xae>
 604:	80 91 e8 00 	lds	r24, 0x00E8
 608:	82 ff       	sbrs	r24, 2
 60a:	f6 cf       	rjmp	.-20     	; 0x5f8 <Endpoint_Write_Control_Stream_LE+0x8a>
 60c:	80 e0       	ldi	r24, 0x00	; 0
 60e:	08 95       	ret
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	08 95       	ret
 614:	83 e0       	ldi	r24, 0x03	; 3
 616:	08 95       	ret
 618:	82 e0       	ldi	r24, 0x02	; 2
 61a:	08 95       	ret
 61c:	83 e0       	ldi	r24, 0x03	; 3
 61e:	08 95       	ret

00000620 <Endpoint_Write_Control_PStream_LE>:
 620:	28 2f       	mov	r18, r24
 622:	39 2f       	mov	r19, r25
 624:	c9 01       	movw	r24, r18
 626:	20 91 ae 01 	lds	r18, 0x01AE
 62a:	30 91 af 01 	lds	r19, 0x01AF
 62e:	26 17       	cp	r18, r22
 630:	37 07       	cpc	r19, r23
 632:	18 f4       	brcc	.+6      	; 0x63a <Endpoint_Write_Control_PStream_LE+0x1a>
 634:	b9 01       	movw	r22, r18
 636:	30 e0       	ldi	r19, 0x00	; 0
 638:	34 c0       	rjmp	.+104    	; 0x6a2 <Endpoint_Write_Control_PStream_LE+0x82>
 63a:	61 15       	cp	r22, r1
 63c:	71 05       	cpc	r23, r1
 63e:	d9 f7       	brne	.-10     	; 0x636 <Endpoint_Write_Control_PStream_LE+0x16>
 640:	20 91 e8 00 	lds	r18, 0x00E8
 644:	2e 77       	andi	r18, 0x7E	; 126
 646:	20 93 e8 00 	sts	0x00E8, r18
 64a:	f5 cf       	rjmp	.-22     	; 0x636 <Endpoint_Write_Control_PStream_LE+0x16>
 64c:	20 91 e8 00 	lds	r18, 0x00E8
 650:	23 fd       	sbrc	r18, 3
 652:	39 c0       	rjmp	.+114    	; 0x6c6 <Endpoint_Write_Control_PStream_LE+0xa6>
 654:	20 91 e8 00 	lds	r18, 0x00E8
 658:	22 fd       	sbrc	r18, 2
 65a:	2f c0       	rjmp	.+94     	; 0x6ba <Endpoint_Write_Control_PStream_LE+0x9a>
 65c:	2e b3       	in	r18, 0x1e	; 30
 65e:	22 23       	and	r18, r18
 660:	b1 f1       	breq	.+108    	; 0x6ce <Endpoint_Write_Control_PStream_LE+0xae>
 662:	2e b3       	in	r18, 0x1e	; 30
 664:	25 30       	cpi	r18, 0x05	; 5
 666:	89 f1       	breq	.+98     	; 0x6ca <Endpoint_Write_Control_PStream_LE+0xaa>
 668:	20 91 e8 00 	lds	r18, 0x00E8
 66c:	20 ff       	sbrs	r18, 0
 66e:	19 c0       	rjmp	.+50     	; 0x6a2 <Endpoint_Write_Control_PStream_LE+0x82>
 670:	20 91 f2 00 	lds	r18, 0x00F2
 674:	08 c0       	rjmp	.+16     	; 0x686 <Endpoint_Write_Control_PStream_LE+0x66>
 676:	fc 01       	movw	r30, r24
 678:	01 96       	adiw	r24, 0x01	; 1
 67a:	e4 91       	lpm	r30, Z
 67c:	e0 93 f1 00 	sts	0x00F1, r30
 680:	61 50       	subi	r22, 0x01	; 1
 682:	70 40       	sbci	r23, 0x00	; 0
 684:	2f 5f       	subi	r18, 0xFF	; 255
 686:	61 15       	cp	r22, r1
 688:	71 05       	cpc	r23, r1
 68a:	11 f0       	breq	.+4      	; 0x690 <Endpoint_Write_Control_PStream_LE+0x70>
 68c:	28 30       	cpi	r18, 0x08	; 8
 68e:	98 f3       	brcs	.-26     	; 0x676 <Endpoint_Write_Control_PStream_LE+0x56>
 690:	31 e0       	ldi	r19, 0x01	; 1
 692:	28 30       	cpi	r18, 0x08	; 8
 694:	09 f0       	breq	.+2      	; 0x698 <Endpoint_Write_Control_PStream_LE+0x78>
 696:	30 e0       	ldi	r19, 0x00	; 0
 698:	20 91 e8 00 	lds	r18, 0x00E8
 69c:	2e 77       	andi	r18, 0x7E	; 126
 69e:	20 93 e8 00 	sts	0x00E8, r18
 6a2:	61 15       	cp	r22, r1
 6a4:	71 05       	cpc	r23, r1
 6a6:	91 f6       	brne	.-92     	; 0x64c <Endpoint_Write_Control_PStream_LE+0x2c>
 6a8:	33 23       	and	r19, r19
 6aa:	81 f6       	brne	.-96     	; 0x64c <Endpoint_Write_Control_PStream_LE+0x2c>
 6ac:	06 c0       	rjmp	.+12     	; 0x6ba <Endpoint_Write_Control_PStream_LE+0x9a>
 6ae:	8e b3       	in	r24, 0x1e	; 30
 6b0:	88 23       	and	r24, r24
 6b2:	69 f0       	breq	.+26     	; 0x6ce <Endpoint_Write_Control_PStream_LE+0xae>
 6b4:	8e b3       	in	r24, 0x1e	; 30
 6b6:	85 30       	cpi	r24, 0x05	; 5
 6b8:	61 f0       	breq	.+24     	; 0x6d2 <Endpoint_Write_Control_PStream_LE+0xb2>
 6ba:	80 91 e8 00 	lds	r24, 0x00E8
 6be:	82 ff       	sbrs	r24, 2
 6c0:	f6 cf       	rjmp	.-20     	; 0x6ae <Endpoint_Write_Control_PStream_LE+0x8e>
 6c2:	80 e0       	ldi	r24, 0x00	; 0
 6c4:	08 95       	ret
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	08 95       	ret
 6ca:	83 e0       	ldi	r24, 0x03	; 3
 6cc:	08 95       	ret
 6ce:	82 e0       	ldi	r24, 0x02	; 2
 6d0:	08 95       	ret
 6d2:	83 e0       	ldi	r24, 0x03	; 3
 6d4:	08 95       	ret

000006d6 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	
	if (!(Length))
 6d6:	61 15       	cp	r22, r1
 6d8:	71 05       	cpc	r23, r1
 6da:	19 f5       	brne	.+70     	; 0x722 <Endpoint_Read_Control_Stream_LE+0x4c>
 6dc:	1d c0       	rjmp	.+58     	; 0x718 <Endpoint_Read_Control_Stream_LE+0x42>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 6de:	20 91 e8 00 	lds	r18, 0x00E8
	  Endpoint_ClearOUT();
	
	while (Length)
	{
		if (Endpoint_IsSETUPReceived())
 6e2:	23 fd       	sbrc	r18, 3
 6e4:	2e c0       	rjmp	.+92     	; 0x742 <Endpoint_Read_Control_Stream_LE+0x6c>
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (USB_DeviceState == DEVICE_STATE_Unattached)
 6e6:	2e b3       	in	r18, 0x1e	; 30
 6e8:	22 23       	and	r18, r18
 6ea:	79 f1       	breq	.+94     	; 0x74a <Endpoint_Read_Control_Stream_LE+0x74>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 6ec:	2e b3       	in	r18, 0x1e	; 30
 6ee:	25 30       	cpi	r18, 0x05	; 5
 6f0:	51 f1       	breq	.+84     	; 0x746 <Endpoint_Read_Control_Stream_LE+0x70>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 6f2:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsOUTReceived())
 6f6:	22 ff       	sbrs	r18, 2
 6f8:	f2 cf       	rjmp	.-28     	; 0x6de <Endpoint_Read_Control_Stream_LE+0x8>
 6fa:	e8 2f       	mov	r30, r24
 6fc:	f9 2f       	mov	r31, r25
 6fe:	07 c0       	rjmp	.+14     	; 0x70e <Endpoint_Read_Control_Stream_LE+0x38>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
 700:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 704:	81 93       	st	Z+, r24
 706:	cf 01       	movw	r24, r30
				Length--;
 708:	61 50       	subi	r22, 0x01	; 1
 70a:	70 40       	sbci	r23, 0x00	; 0
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
 70c:	29 f0       	breq	.+10     	; 0x718 <Endpoint_Read_Control_Stream_LE+0x42>
 70e:	cf 01       	movw	r24, r30
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 710:	20 91 f2 00 	lds	r18, 0x00F2
 714:	22 23       	and	r18, r18
 716:	a1 f7       	brne	.-24     	; 0x700 <Endpoint_Read_Control_Stream_LE+0x2a>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 718:	20 91 e8 00 	lds	r18, 0x00E8
 71c:	2b 77       	andi	r18, 0x7B	; 123
 71e:	20 93 e8 00 	sts	0x00E8, r18
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	
	if (!(Length))
	  Endpoint_ClearOUT();
	
	while (Length)
 722:	61 15       	cp	r22, r1
 724:	71 05       	cpc	r23, r1
 726:	d9 f6       	brne	.-74     	; 0x6de <Endpoint_Read_Control_Stream_LE+0x8>
 728:	06 c0       	rjmp	.+12     	; 0x736 <Endpoint_Read_Control_Stream_LE+0x60>
		}		  
	}
	
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 72a:	8e b3       	in	r24, 0x1e	; 30
 72c:	88 23       	and	r24, r24
 72e:	69 f0       	breq	.+26     	; 0x74a <Endpoint_Read_Control_Stream_LE+0x74>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 730:	8e b3       	in	r24, 0x1e	; 30
 732:	85 30       	cpi	r24, 0x05	; 5
 734:	61 f0       	breq	.+24     	; 0x74e <Endpoint_Read_Control_Stream_LE+0x78>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
 736:	80 91 e8 00 	lds	r24, 0x00E8
			
			Endpoint_ClearOUT();
		}		  
	}
	
	while (!(Endpoint_IsINReady()))
 73a:	80 ff       	sbrs	r24, 0
 73c:	f6 cf       	rjmp	.-20     	; 0x72a <Endpoint_Read_Control_Stream_LE+0x54>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}
	
	return ENDPOINT_RWCSTREAM_NoError;
 73e:	80 e0       	ldi	r24, 0x00	; 0
 740:	08 95       	ret
	  Endpoint_ClearOUT();
	
	while (Length)
	{
		if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 742:	81 e0       	ldi	r24, 0x01	; 1
 744:	08 95       	ret

		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 746:	83 e0       	ldi	r24, 0x03	; 3
 748:	08 95       	ret
	}
	
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 74a:	82 e0       	ldi	r24, 0x02	; 2
 74c:	08 95       	ret
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 74e:	83 e0       	ldi	r24, 0x03	; 3
	}
	
	return ENDPOINT_RWCSTREAM_NoError;
}
 750:	08 95       	ret

00000752 <USB_ResetInterface>:
	USB_IsInitialized = false;

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_NONE;
	#endif
}
 752:	40 d0       	rcall	.+128    	; 0x7d4 <USB_INT_DisableAllInterrupts>
 754:	42 d0       	rcall	.+132    	; 0x7da <USB_INT_ClearAllInterrupts>
 756:	1e ba       	out	0x1e, r1	; 30
 758:	10 92 a6 01 	sts	0x01A6, r1
 75c:	10 92 a5 01 	sts	0x01A5, r1
 760:	84 e0       	ldi	r24, 0x04	; 4
 762:	89 bd       	out	0x29, r24	; 41
 764:	89 b5       	in	r24, 0x29	; 41
 766:	82 60       	ori	r24, 0x02	; 2
 768:	89 bd       	out	0x29, r24	; 41
 76a:	09 b4       	in	r0, 0x29	; 41
 76c:	00 fe       	sbrs	r0, 0
 76e:	fd cf       	rjmp	.-6      	; 0x76a <USB_ResetInterface+0x18>
 770:	80 91 d8 00 	lds	r24, 0x00D8
 774:	98 2f       	mov	r25, r24
 776:	9f 77       	andi	r25, 0x7F	; 127
 778:	90 93 d8 00 	sts	0x00D8, r25
 77c:	80 68       	ori	r24, 0x80	; 128
 77e:	80 93 d8 00 	sts	0x00D8, r24
 782:	80 91 63 00 	lds	r24, 0x0063
 786:	8e 7f       	andi	r24, 0xFE	; 254
 788:	80 93 63 00 	sts	0x0063, r24
 78c:	80 91 d8 00 	lds	r24, 0x00D8
 790:	8f 7d       	andi	r24, 0xDF	; 223
 792:	80 93 d8 00 	sts	0x00D8, r24
 796:	80 91 e0 00 	lds	r24, 0x00E0
 79a:	8e 7f       	andi	r24, 0xFE	; 254
 79c:	80 93 e0 00 	sts	0x00E0, r24
 7a0:	80 91 e1 00 	lds	r24, 0x00E1
 7a4:	8e 7f       	andi	r24, 0xFE	; 254
 7a6:	80 93 e1 00 	sts	0x00E1, r24
 7aa:	80 91 e2 00 	lds	r24, 0x00E2
 7ae:	81 60       	ori	r24, 0x01	; 1
 7b0:	80 93 e2 00 	sts	0x00E2, r24
 7b4:	80 91 e1 00 	lds	r24, 0x00E1
 7b8:	87 7f       	andi	r24, 0xF7	; 247
 7ba:	80 93 e1 00 	sts	0x00E1, r24
 7be:	80 91 e2 00 	lds	r24, 0x00E2
 7c2:	88 60       	ori	r24, 0x08	; 8
 7c4:	80 93 e2 00 	sts	0x00E2, r24
 7c8:	08 95       	ret

000007ca <USB_Init>:
		EVENT_USB_InitFailure(USB_INITERROR_NoUSBModeSpecified);
		return;
	}
	#endif
	
	USB_ResetInterface();
 7ca:	c3 df       	rcall	.-122    	; 0x752 <USB_ResetInterface>

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USB_OTGPAD_On();
	#endif

	USB_IsInitialized = true;
 7cc:	81 e0       	ldi	r24, 0x01	; 1
 7ce:	80 93 a7 01 	sts	0x01A7, r24
}
 7d2:	08 95       	ret

000007d4 <USB_INT_DisableAllInterrupts>:
	UHIEN   = 0;
	OTGIEN  = 0;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 7d4:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 7d8:	08 95       	ret

000007da <USB_INT_ClearAllInterrupts>:
	UHINT   = 0;
	OTGINT  = 0;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
 7da:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 7de:	08 95       	ret

000007e0 <__vector_11>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 7e0:	1f 92       	push	r1
 7e2:	0f 92       	push	r0
 7e4:	0f b6       	in	r0, 0x3f	; 63
 7e6:	0f 92       	push	r0
 7e8:	11 24       	eor	r1, r1
 7ea:	2f 93       	push	r18
 7ec:	3f 93       	push	r19
 7ee:	4f 93       	push	r20
 7f0:	5f 93       	push	r21
 7f2:	6f 93       	push	r22
 7f4:	7f 93       	push	r23
 7f6:	8f 93       	push	r24
 7f8:	9f 93       	push	r25
 7fa:	af 93       	push	r26
 7fc:	bf 93       	push	r27
 7fe:	ef 93       	push	r30
 800:	ff 93       	push	r31
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPEND) && USB_INT_IsEnabled(USB_INT_SUSPEND))
 802:	80 91 e1 00 	lds	r24, 0x00E1
 806:	80 ff       	sbrs	r24, 0
 808:	1b c0       	rjmp	.+54     	; 0x840 <__vector_11+0x60>
 80a:	80 91 e2 00 	lds	r24, 0x00E2
 80e:	80 ff       	sbrs	r24, 0
 810:	17 c0       	rjmp	.+46     	; 0x840 <__vector_11+0x60>
	{
		USB_INT_Clear(USB_INT_SUSPEND);
 812:	80 91 e1 00 	lds	r24, 0x00E1
 816:	8e 7f       	andi	r24, 0xFE	; 254
 818:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_SUSPEND);
 81c:	80 91 e2 00 	lds	r24, 0x00E2
 820:	8e 7f       	andi	r24, 0xFE	; 254
 822:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUP);
 826:	80 91 e2 00 	lds	r24, 0x00E2
 82a:	80 61       	ori	r24, 0x10	; 16
 82c:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 830:	80 91 d8 00 	lds	r24, 0x00D8
 834:	80 62       	ori	r24, 0x20	; 32
 836:	80 93 d8 00 	sts	0x00D8, r24
			}
			
			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
 83a:	19 bc       	out	0x29, r1	; 41
		
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
 83c:	1e ba       	out	0x1e, r1	; 30
		EVENT_USB_Device_Disconnect();
 83e:	ed dc       	rcall	.-1574   	; 0x21a <EVENT_USB_Device_Disconnect>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUP) && USB_INT_IsEnabled(USB_INT_WAKEUP))
 840:	80 91 e1 00 	lds	r24, 0x00E1
 844:	84 ff       	sbrs	r24, 4
 846:	29 c0       	rjmp	.+82     	; 0x89a <__vector_11+0xba>
 848:	80 91 e2 00 	lds	r24, 0x00E2
 84c:	84 ff       	sbrs	r24, 4
 84e:	25 c0       	rjmp	.+74     	; 0x89a <__vector_11+0xba>
	#if !defined(__DOXYGEN__)
		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 850:	84 e0       	ldi	r24, 0x04	; 4
 852:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
 854:	89 b5       	in	r24, 0x29	; 41
 856:	82 60       	ori	r24, 0x02	; 2
 858:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 85a:	09 b4       	in	r0, 0x29	; 41
 85c:	00 fe       	sbrs	r0, 0
 85e:	fd cf       	rjmp	.-6      	; 0x85a <__vector_11+0x7a>
			}
			
			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 860:	80 91 d8 00 	lds	r24, 0x00D8
 864:	8f 7d       	andi	r24, 0xDF	; 223
 866:	80 93 d8 00 	sts	0x00D8, r24
		}

		USB_CLK_Unfreeze();

		USB_INT_Clear(USB_INT_WAKEUP);
 86a:	80 91 e1 00 	lds	r24, 0x00E1
 86e:	8f 7e       	andi	r24, 0xEF	; 239
 870:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_WAKEUP);
 874:	80 91 e2 00 	lds	r24, 0x00E2
 878:	8f 7e       	andi	r24, 0xEF	; 239
 87a:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_SUSPEND);
 87e:	80 91 e2 00 	lds	r24, 0x00E2
 882:	81 60       	ori	r24, 0x01	; 1
 884:	80 93 e2 00 	sts	0x00E2, r24
		
		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 888:	80 91 a6 01 	lds	r24, 0x01A6
 88c:	88 23       	and	r24, r24
 88e:	11 f0       	breq	.+4      	; 0x894 <__vector_11+0xb4>
 890:	84 e0       	ldi	r24, 0x04	; 4
 892:	01 c0       	rjmp	.+2      	; 0x896 <__vector_11+0xb6>
 894:	81 e0       	ldi	r24, 0x01	; 1
 896:	8e bb       	out	0x1e, r24	; 30
		EVENT_USB_Device_Connect();
 898:	bf dc       	rcall	.-1666   	; 0x218 <EVENT_USB_Device_Connect>
		USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
		EVENT_USB_Device_WakeUp();		
		#endif
	}
   
	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 89a:	80 91 e1 00 	lds	r24, 0x00E1
 89e:	83 ff       	sbrs	r24, 3
 8a0:	22 c0       	rjmp	.+68     	; 0x8e6 <__vector_11+0x106>
 8a2:	80 91 e2 00 	lds	r24, 0x00E2
 8a6:	83 ff       	sbrs	r24, 3
 8a8:	1e c0       	rjmp	.+60     	; 0x8e6 <__vector_11+0x106>
	{
		USB_INT_Clear(USB_INT_EORSTI);
 8aa:	80 91 e1 00 	lds	r24, 0x00E1
 8ae:	87 7f       	andi	r24, 0xF7	; 247
 8b0:	80 93 e1 00 	sts	0x00E1, r24

		USB_DeviceState         = DEVICE_STATE_Default;
 8b4:	82 e0       	ldi	r24, 0x02	; 2
 8b6:	8e bb       	out	0x1e, r24	; 30
		USB_ConfigurationNumber = 0;
 8b8:	10 92 a6 01 	sts	0x01A6, r1

		USB_INT_Clear(USB_INT_SUSPEND);
 8bc:	80 91 e1 00 	lds	r24, 0x00E1
 8c0:	8e 7f       	andi	r24, 0xFE	; 254
 8c2:	80 93 e1 00 	sts	0x00E1, r24
		USB_INT_Disable(USB_INT_SUSPEND);
 8c6:	80 91 e2 00 	lds	r24, 0x00E2
 8ca:	8e 7f       	andi	r24, 0xFE	; 254
 8cc:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUP);
 8d0:	80 91 e2 00 	lds	r24, 0x00E2
 8d4:	80 61       	ori	r24, 0x10	; 16
 8d6:	80 93 e2 00 	sts	0x00E2, r24

		Endpoint_ClearEndpoints();
 8da:	a0 dd       	rcall	.-1216   	; 0x41c <Endpoint_ClearEndpoints>
			                                                    const uint8_t Type,
			                                                    const uint8_t Direction,
			                                                    const uint16_t Size,
			                                                    const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 8dc:	80 e0       	ldi	r24, 0x00	; 0
 8de:	60 e0       	ldi	r22, 0x00	; 0
 8e0:	42 e0       	ldi	r20, 0x02	; 2
 8e2:	89 dd       	rcall	.-1262   	; 0x3f6 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 8e4:	23 d1       	rcall	.+582    	; 0xb2c <USB_Event_Stub>
	}
	
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 8e6:	80 91 e1 00 	lds	r24, 0x00E1
 8ea:	82 ff       	sbrs	r24, 2
 8ec:	0a c0       	rjmp	.+20     	; 0x902 <__vector_11+0x122>
 8ee:	80 91 e2 00 	lds	r24, 0x00E2
 8f2:	82 ff       	sbrs	r24, 2
 8f4:	06 c0       	rjmp	.+12     	; 0x902 <__vector_11+0x122>
	{
		USB_INT_Clear(USB_INT_SOFI);
 8f6:	80 91 e1 00 	lds	r24, 0x00E1
 8fa:	8b 7f       	andi	r24, 0xFB	; 251
 8fc:	80 93 e1 00 	sts	0x00E1, r24
		
		EVENT_USB_Device_StartOfFrame();
 900:	99 dc       	rcall	.-1742   	; 0x234 <EVENT_USB_Device_StartOfFrame>
		EVENT_USB_UIDChange();

		USB_ResetInterface();
	}
	#endif
}
 902:	ff 91       	pop	r31
 904:	ef 91       	pop	r30
 906:	bf 91       	pop	r27
 908:	af 91       	pop	r26
 90a:	9f 91       	pop	r25
 90c:	8f 91       	pop	r24
 90e:	7f 91       	pop	r23
 910:	6f 91       	pop	r22
 912:	5f 91       	pop	r21
 914:	4f 91       	pop	r20
 916:	3f 91       	pop	r19
 918:	2f 91       	pop	r18
 91a:	0f 90       	pop	r0
 91c:	0f be       	out	0x3f, r0	; 63
 91e:	0f 90       	pop	r0
 920:	1f 90       	pop	r1
 922:	18 95       	reti

00000924 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 924:	1f 93       	push	r17
 926:	df 93       	push	r29
 928:	cf 93       	push	r28
 92a:	00 d0       	rcall	.+0      	; 0x92c <USB_Device_ProcessControlRequest+0x8>
 92c:	cd b7       	in	r28, 0x3d	; 61
 92e:	de b7       	in	r29, 0x3e	; 62
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;
 930:	e8 ea       	ldi	r30, 0xA8	; 168
 932:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
 934:	80 91 f1 00 	lds	r24, 0x00F1
	
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
 938:	81 93       	st	Z+, r24
void USB_Device_ProcessControlRequest(void)
{
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;
	
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 93a:	81 e0       	ldi	r24, 0x01	; 1
 93c:	e0 3b       	cpi	r30, 0xB0	; 176
 93e:	f8 07       	cpc	r31, r24
 940:	c9 f7       	brne	.-14     	; 0x934 <USB_Device_ProcessControlRequest+0x10>
	  *(RequestHeader++) = Endpoint_Read_Byte();
	  
	uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 942:	80 91 a8 01 	lds	r24, 0x01A8
	
	switch (USB_ControlRequest.bRequest)
 946:	90 91 a9 01 	lds	r25, 0x01A9
 94a:	95 30       	cpi	r25, 0x05	; 5
 94c:	09 f4       	brne	.+2      	; 0x950 <USB_Device_ProcessControlRequest+0x2c>
 94e:	72 c0       	rjmp	.+228    	; 0xa34 <USB_Device_ProcessControlRequest+0x110>
 950:	96 30       	cpi	r25, 0x06	; 6
 952:	40 f4       	brcc	.+16     	; 0x964 <USB_Device_ProcessControlRequest+0x40>
 954:	91 30       	cpi	r25, 0x01	; 1
 956:	99 f1       	breq	.+102    	; 0x9be <USB_Device_ProcessControlRequest+0x9a>
 958:	91 30       	cpi	r25, 0x01	; 1
 95a:	70 f0       	brcs	.+28     	; 0x978 <USB_Device_ProcessControlRequest+0x54>
 95c:	93 30       	cpi	r25, 0x03	; 3
 95e:	09 f0       	breq	.+2      	; 0x962 <USB_Device_ProcessControlRequest+0x3e>
 960:	d0 c0       	rjmp	.+416    	; 0xb02 <USB_Device_ProcessControlRequest+0x1de>
 962:	2d c0       	rjmp	.+90     	; 0x9be <USB_Device_ProcessControlRequest+0x9a>
 964:	98 30       	cpi	r25, 0x08	; 8
 966:	09 f4       	brne	.+2      	; 0x96a <USB_Device_ProcessControlRequest+0x46>
 968:	a2 c0       	rjmp	.+324    	; 0xaae <USB_Device_ProcessControlRequest+0x18a>
 96a:	99 30       	cpi	r25, 0x09	; 9
 96c:	09 f4       	brne	.+2      	; 0x970 <USB_Device_ProcessControlRequest+0x4c>
 96e:	b1 c0       	rjmp	.+354    	; 0xad2 <USB_Device_ProcessControlRequest+0x1ae>
 970:	96 30       	cpi	r25, 0x06	; 6
 972:	09 f0       	breq	.+2      	; 0x976 <USB_Device_ProcessControlRequest+0x52>
 974:	c6 c0       	rjmp	.+396    	; 0xb02 <USB_Device_ProcessControlRequest+0x1de>
 976:	7c c0       	rjmp	.+248    	; 0xa70 <USB_Device_ProcessControlRequest+0x14c>
	{
		case REQ_GetStatus:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 978:	80 38       	cpi	r24, 0x80	; 128
 97a:	21 f0       	breq	.+8      	; 0x984 <USB_Device_ProcessControlRequest+0x60>
 97c:	82 38       	cpi	r24, 0x82	; 130
 97e:	09 f0       	breq	.+2      	; 0x982 <USB_Device_ProcessControlRequest+0x5e>
 980:	c0 c0       	rjmp	.+384    	; 0xb02 <USB_Device_ProcessControlRequest+0x1de>
 982:	05 c0       	rjmp	.+10     	; 0x98e <USB_Device_ProcessControlRequest+0x6a>
	switch (USB_ControlRequest.bmRequestType)
	{
#if !defined(NO_DEVICE_SELF_POWER) || !defined(NO_DEVICE_REMOTE_WAKEUP)	
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE):
	#if !defined(NO_DEVICE_SELF_POWER)
			if (USB_CurrentlySelfPowered)
 984:	80 91 a5 01 	lds	r24, 0x01A5
 988:	88 23       	and	r24, r24
 98a:	71 f4       	brne	.+28     	; 0x9a8 <USB_Device_ProcessControlRequest+0x84>
 98c:	0e c0       	rjmp	.+28     	; 0x9aa <USB_Device_ProcessControlRequest+0x86>
	#endif
			break;
#endif
#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 98e:	80 91 ac 01 	lds	r24, 0x01AC
 992:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 994:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 998:	90 91 eb 00 	lds	r25, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
 99c:	81 e0       	ldi	r24, 0x01	; 1
 99e:	95 ff       	sbrs	r25, 5
 9a0:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 9a2:	10 92 e9 00 	sts	0x00E9, r1
 9a6:	01 c0       	rjmp	.+2      	; 0x9aa <USB_Device_ProcessControlRequest+0x86>
	{
#if !defined(NO_DEVICE_SELF_POWER) || !defined(NO_DEVICE_REMOTE_WAKEUP)	
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE):
	#if !defined(NO_DEVICE_SELF_POWER)
			if (USB_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
 9a8:	81 e0       	ldi	r24, 0x01	; 1
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9aa:	90 91 e8 00 	lds	r25, 0x00E8
 9ae:	97 7f       	andi	r25, 0xF7	; 247
 9b0:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
 9b4:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Word >> 8);
 9b8:	10 92 f1 00 	sts	0x00F1, r1
 9bc:	83 c0       	rjmp	.+262    	; 0xac4 <USB_Device_ProcessControlRequest+0x1a0>
			}

			break;
		case REQ_ClearFeature:
		case REQ_SetFeature:
			if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 9be:	88 23       	and	r24, r24
 9c0:	19 f0       	breq	.+6      	; 0x9c8 <USB_Device_ProcessControlRequest+0xa4>
 9c2:	82 30       	cpi	r24, 0x02	; 2
 9c4:	09 f0       	breq	.+2      	; 0x9c8 <USB_Device_ProcessControlRequest+0xa4>
 9c6:	9d c0       	rjmp	.+314    	; 0xb02 <USB_Device_ProcessControlRequest+0x1de>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 9c8:	8f 71       	andi	r24, 0x1F	; 31
 9ca:	82 30       	cpi	r24, 0x02	; 2
 9cc:	09 f0       	breq	.+2      	; 0x9d0 <USB_Device_ProcessControlRequest+0xac>
 9ce:	9a c0       	rjmp	.+308    	; 0xb04 <USB_Device_ProcessControlRequest+0x1e0>
			
			break;			
#endif
#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_ENDPOINT_HALT)
 9d0:	80 91 aa 01 	lds	r24, 0x01AA
 9d4:	88 23       	and	r24, r24
 9d6:	41 f5       	brne	.+80     	; 0xa28 <USB_Device_ProcessControlRequest+0x104>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 9d8:	20 91 ac 01 	lds	r18, 0x01AC
 9dc:	27 70       	andi	r18, 0x07	; 7
				
				if (EndpointIndex == ENDPOINT_CONTROLEP)
 9de:	09 f4       	brne	.+2      	; 0x9e2 <USB_Device_ProcessControlRequest+0xbe>
 9e0:	91 c0       	rjmp	.+290    	; 0xb04 <USB_Device_ProcessControlRequest+0x1e0>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 9e2:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean True if the currently selected endpoint is enabled, false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 9e6:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (!(Endpoint_IsEnabled()))
 9ea:	80 ff       	sbrs	r24, 0
 9ec:	8b c0       	rjmp	.+278    	; 0xb04 <USB_Device_ProcessControlRequest+0x1e0>
				  return;

				if (USB_ControlRequest.bRequest == REQ_SetFeature)
 9ee:	80 91 a9 01 	lds	r24, 0x01A9
 9f2:	83 30       	cpi	r24, 0x03	; 3
 9f4:	21 f4       	brne	.+8      	; 0x9fe <USB_Device_ProcessControlRequest+0xda>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 9f6:	80 91 eb 00 	lds	r24, 0x00EB
 9fa:	80 62       	ori	r24, 0x20	; 32
 9fc:	13 c0       	rjmp	.+38     	; 0xa24 <USB_Device_ProcessControlRequest+0x100>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 9fe:	80 91 eb 00 	lds	r24, 0x00EB
 a02:	80 61       	ori	r24, 0x10	; 16
 a04:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 a08:	81 e0       	ldi	r24, 0x01	; 1
 a0a:	90 e0       	ldi	r25, 0x00	; 0
 a0c:	02 c0       	rjmp	.+4      	; 0xa12 <USB_Device_ProcessControlRequest+0xee>
 a0e:	88 0f       	add	r24, r24
 a10:	99 1f       	adc	r25, r25
 a12:	2a 95       	dec	r18
 a14:	e2 f7       	brpl	.-8      	; 0xa0e <USB_Device_ProcessControlRequest+0xea>
 a16:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
 a1a:	10 92 ea 00 	sts	0x00EA, r1
			
			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 a1e:	80 91 eb 00 	lds	r24, 0x00EB
 a22:	88 60       	ori	r24, 0x08	; 8
 a24:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a28:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a2c:	80 91 e8 00 	lds	r24, 0x00E8
 a30:	87 7f       	andi	r24, 0xF7	; 247
 a32:	4b c0       	rjmp	.+150    	; 0xaca <USB_Device_ProcessControlRequest+0x1a6>
				RequestHandled = true;
			}

			break;
		case REQ_SetAddress:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 a34:	88 23       	and	r24, r24
 a36:	09 f0       	breq	.+2      	; 0xa3a <USB_Device_ProcessControlRequest+0x116>
 a38:	64 c0       	rjmp	.+200    	; 0xb02 <USB_Device_ProcessControlRequest+0x1de>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 a3a:	10 91 aa 01 	lds	r17, 0x01AA
 a3e:	80 91 e8 00 	lds	r24, 0x00E8
 a42:	87 7f       	andi	r24, 0xF7	; 247
 a44:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_ClearSETUP();
	
	Endpoint_ClearStatusStage();
 a48:	fd dc       	rcall	.-1542   	; 0x444 <Endpoint_ClearStatusStage>
 a4a:	04 c0       	rjmp	.+8      	; 0xa54 <USB_Device_ProcessControlRequest+0x130>
	
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 a4c:	8e b3       	in	r24, 0x1e	; 30
 a4e:	88 23       	and	r24, r24
 a50:	09 f4       	brne	.+2      	; 0xa54 <USB_Device_ProcessControlRequest+0x130>
 a52:	58 c0       	rjmp	.+176    	; 0xb04 <USB_Device_ProcessControlRequest+0x1e0>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
 a54:	80 91 e8 00 	lds	r24, 0x00E8

	Endpoint_ClearSETUP();
	
	Endpoint_ClearStatusStage();
	
	while (!(Endpoint_IsINReady()))
 a58:	80 ff       	sbrs	r24, 0
 a5a:	f8 cf       	rjmp	.-16     	; 0xa4c <USB_Device_ProcessControlRequest+0x128>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 a5c:	1f 77       	andi	r17, 0x7F	; 127
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return;
	}

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 a5e:	11 f0       	breq	.+4      	; 0xa64 <USB_Device_ProcessControlRequest+0x140>
 a60:	83 e0       	ldi	r24, 0x03	; 3
 a62:	01 c0       	rjmp	.+2      	; 0xa66 <USB_Device_ProcessControlRequest+0x142>
 a64:	82 e0       	ldi	r24, 0x02	; 2
 a66:	8e bb       	out	0x1e, r24	; 30
			#endif
			
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = ((1 << ADDEN) | (Address & 0x7F));
 a68:	10 68       	ori	r17, 0x80	; 128
 a6a:	10 93 e3 00 	sts	0x00E3, r17
 a6e:	4a c0       	rjmp	.+148    	; 0xb04 <USB_Device_ProcessControlRequest+0x1e0>
				RequestHandled = true;
			}

			break;
		case REQ_GetDescriptor:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a70:	80 58       	subi	r24, 0x80	; 128
 a72:	82 30       	cpi	r24, 0x02	; 2
 a74:	08 f0       	brcs	.+2      	; 0xa78 <USB_Device_ProcessControlRequest+0x154>
 a76:	45 c0       	rjmp	.+138    	; 0xb02 <USB_Device_ProcessControlRequest+0x1de>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif
	
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 a78:	80 91 aa 01 	lds	r24, 0x01AA
 a7c:	90 91 ab 01 	lds	r25, 0x01AB
 a80:	60 91 ac 01 	lds	r22, 0x01AC
 a84:	ae 01       	movw	r20, r28
 a86:	4f 5f       	subi	r20, 0xFF	; 255
 a88:	5f 4f       	sbci	r21, 0xFF	; 255
 a8a:	69 dc       	rcall	.-1838   	; 0x35e <CALLBACK_USB_GetDescriptor>
 a8c:	bc 01       	movw	r22, r24
 a8e:	00 97       	sbiw	r24, 0x00	; 0
 a90:	c9 f1       	breq	.+114    	; 0xb04 <USB_Device_ProcessControlRequest+0x1e0>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a92:	80 91 e8 00 	lds	r24, 0x00E8
 a96:	87 7f       	andi	r24, 0xF7	; 247
 a98:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);	
 a9c:	89 81       	ldd	r24, Y+1	; 0x01
 a9e:	9a 81       	ldd	r25, Y+2	; 0x02
 aa0:	bf dd       	rcall	.-1154   	; 0x620 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 aa2:	80 91 e8 00 	lds	r24, 0x00E8
 aa6:	8b 77       	andi	r24, 0x7B	; 123
 aa8:	80 93 e8 00 	sts	0x00E8, r24
 aac:	2b c0       	rjmp	.+86     	; 0xb04 <USB_Device_ProcessControlRequest+0x1e0>
				RequestHandled = true;
			}
			
			break;
		case REQ_GetConfiguration:
			if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 aae:	80 38       	cpi	r24, 0x80	; 128
 ab0:	41 f5       	brne	.+80     	; 0xb02 <USB_Device_ProcessControlRequest+0x1de>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ab2:	80 91 e8 00 	lds	r24, 0x00E8
 ab6:	87 7f       	andi	r24, 0xF7	; 247
 ab8:	80 93 e8 00 	sts	0x00E8, r24

void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_Byte(USB_ConfigurationNumber);
 abc:	80 91 a6 01 	lds	r24, 0x01A6
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 ac0:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 ac4:	80 91 e8 00 	lds	r24, 0x00E8
 ac8:	8e 77       	andi	r24, 0x7E	; 126
 aca:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 ace:	ba dc       	rcall	.-1676   	; 0x444 <Endpoint_ClearStatusStage>
 ad0:	19 c0       	rjmp	.+50     	; 0xb04 <USB_Device_ProcessControlRequest+0x1e0>
				RequestHandled = true;
			}

			break;
		case REQ_SetConfiguration:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 ad2:	88 23       	and	r24, r24
 ad4:	b1 f4       	brne	.+44     	; 0xb02 <USB_Device_ProcessControlRequest+0x1de>
}

static void USB_Device_SetConfiguration(void)
{
#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 ad6:	90 91 aa 01 	lds	r25, 0x01AA
 ada:	92 30       	cpi	r25, 0x02	; 2
 adc:	98 f4       	brcc	.+38     	; 0xb04 <USB_Device_ProcessControlRequest+0x1e0>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ade:	80 91 e8 00 	lds	r24, 0x00E8
 ae2:	87 7f       	andi	r24, 0xF7	; 247
 ae4:	80 93 e8 00 	sts	0x00E8, r24
	}
#endif
	
	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 ae8:	90 93 a6 01 	sts	0x01A6, r25

	Endpoint_ClearStatusStage();
 aec:	ab dc       	rcall	.-1706   	; 0x444 <Endpoint_ClearStatusStage>

	USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
 aee:	80 91 a6 01 	lds	r24, 0x01A6
 af2:	88 23       	and	r24, r24
 af4:	11 f0       	breq	.+4      	; 0xafa <USB_Device_ProcessControlRequest+0x1d6>
 af6:	84 e0       	ldi	r24, 0x04	; 4
 af8:	01 c0       	rjmp	.+2      	; 0xafc <USB_Device_ProcessControlRequest+0x1d8>
 afa:	83 e0       	ldi	r24, 0x03	; 3
 afc:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
 afe:	8e db       	rcall	.-2276   	; 0x21c <EVENT_USB_Device_ConfigurationChanged>
 b00:	01 c0       	rjmp	.+2      	; 0xb04 <USB_Device_ProcessControlRequest+0x1e0>

			break;
	}

	if (!(RequestHandled))
	  EVENT_USB_Device_UnhandledControlRequest();
 b02:	95 db       	rcall	.-2262   	; 0x22e <EVENT_USB_Device_UnhandledControlRequest>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b04:	80 91 e8 00 	lds	r24, 0x00E8
	  
	if (Endpoint_IsSETUPReceived())
 b08:	83 ff       	sbrs	r24, 3
 b0a:	0a c0       	rjmp	.+20     	; 0xb20 <USB_Device_ProcessControlRequest+0x1fc>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 b0c:	80 91 eb 00 	lds	r24, 0x00EB
 b10:	80 62       	ori	r24, 0x20	; 32
 b12:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b16:	80 91 e8 00 	lds	r24, 0x00E8
 b1a:	87 7f       	andi	r24, 0xF7	; 247
 b1c:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();		
	}
}
 b20:	0f 90       	pop	r0
 b22:	0f 90       	pop	r0
 b24:	cf 91       	pop	r28
 b26:	df 91       	pop	r29
 b28:	1f 91       	pop	r17
 b2a:	08 95       	ret

00000b2c <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 b2c:	08 95       	ret

00000b2e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 b2e:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 b30:	8e b3       	in	r24, 0x1e	; 30
 b32:	88 23       	and	r24, r24
 b34:	61 f0       	breq	.+24     	; 0xb4e <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 b36:	10 91 e9 00 	lds	r17, 0x00E9
 b3a:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 b3c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b40:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();
	
		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 b44:	83 ff       	sbrs	r24, 3
 b46:	01 c0       	rjmp	.+2      	; 0xb4a <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
 b48:	ed de       	rcall	.-550    	; 0x924 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 b4a:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_DEVICE)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_HOST)
		  USB_HostTask();
	#endif
}
 b4e:	1f 91       	pop	r17
 b50:	08 95       	ret

00000b52 <HID_Device_ProcessControlRequest>:

#define  __INCLUDE_FROM_HID_DRIVER
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
 b52:	6f 92       	push	r6
 b54:	7f 92       	push	r7
 b56:	8f 92       	push	r8
 b58:	9f 92       	push	r9
 b5a:	af 92       	push	r10
 b5c:	bf 92       	push	r11
 b5e:	cf 92       	push	r12
 b60:	df 92       	push	r13
 b62:	ef 92       	push	r14
 b64:	ff 92       	push	r15
 b66:	0f 93       	push	r16
 b68:	1f 93       	push	r17
 b6a:	df 93       	push	r29
 b6c:	cf 93       	push	r28
 b6e:	00 d0       	rcall	.+0      	; 0xb70 <HID_Device_ProcessControlRequest+0x1e>
 b70:	0f 92       	push	r0
 b72:	cd b7       	in	r28, 0x3d	; 61
 b74:	de b7       	in	r29, 0x3e	; 62
 b76:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
 b78:	6d b6       	in	r6, 0x3d	; 61
 b7a:	7e b6       	in	r7, 0x3e	; 62
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b7c:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DRIVER
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
 b80:	83 ff       	sbrs	r24, 3
 b82:	f8 c0       	rjmp	.+496    	; 0xd74 <HID_Device_ProcessControlRequest+0x222>
	  return;
	  
	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
 b84:	f7 01       	movw	r30, r14
 b86:	80 81       	ld	r24, Z
 b88:	90 e0       	ldi	r25, 0x00	; 0
 b8a:	20 91 ac 01 	lds	r18, 0x01AC
 b8e:	30 91 ad 01 	lds	r19, 0x01AD
 b92:	28 17       	cp	r18, r24
 b94:	39 07       	cpc	r19, r25
 b96:	09 f0       	breq	.+2      	; 0xb9a <HID_Device_ProcessControlRequest+0x48>
 b98:	ed c0       	rjmp	.+474    	; 0xd74 <HID_Device_ProcessControlRequest+0x222>
	  return;

	switch (USB_ControlRequest.bRequest)
 b9a:	80 91 a9 01 	lds	r24, 0x01A9
 b9e:	83 30       	cpi	r24, 0x03	; 3
 ba0:	09 f4       	brne	.+2      	; 0xba4 <HID_Device_ProcessControlRequest+0x52>
 ba2:	99 c0       	rjmp	.+306    	; 0xcd6 <HID_Device_ProcessControlRequest+0x184>
 ba4:	84 30       	cpi	r24, 0x04	; 4
 ba6:	30 f4       	brcc	.+12     	; 0xbb4 <HID_Device_ProcessControlRequest+0x62>
 ba8:	81 30       	cpi	r24, 0x01	; 1
 baa:	71 f0       	breq	.+28     	; 0xbc8 <HID_Device_ProcessControlRequest+0x76>
 bac:	82 30       	cpi	r24, 0x02	; 2
 bae:	09 f0       	breq	.+2      	; 0xbb2 <HID_Device_ProcessControlRequest+0x60>
 bb0:	e1 c0       	rjmp	.+450    	; 0xd74 <HID_Device_ProcessControlRequest+0x222>
 bb2:	c8 c0       	rjmp	.+400    	; 0xd44 <HID_Device_ProcessControlRequest+0x1f2>
 bb4:	8a 30       	cpi	r24, 0x0A	; 10
 bb6:	09 f4       	brne	.+2      	; 0xbba <HID_Device_ProcessControlRequest+0x68>
 bb8:	ae c0       	rjmp	.+348    	; 0xd16 <HID_Device_ProcessControlRequest+0x1c4>
 bba:	8b 30       	cpi	r24, 0x0B	; 11
 bbc:	09 f4       	brne	.+2      	; 0xbc0 <HID_Device_ProcessControlRequest+0x6e>
 bbe:	98 c0       	rjmp	.+304    	; 0xcf0 <HID_Device_ProcessControlRequest+0x19e>
 bc0:	89 30       	cpi	r24, 0x09	; 9
 bc2:	09 f0       	breq	.+2      	; 0xbc6 <HID_Device_ProcessControlRequest+0x74>
 bc4:	d7 c0       	rjmp	.+430    	; 0xd74 <HID_Device_ProcessControlRequest+0x222>
 bc6:	4c c0       	rjmp	.+152    	; 0xc60 <HID_Device_ProcessControlRequest+0x10e>
	{
		case REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 bc8:	80 91 a8 01 	lds	r24, 0x01A8
 bcc:	81 3a       	cpi	r24, 0xA1	; 161
 bce:	09 f0       	breq	.+2      	; 0xbd2 <HID_Device_ProcessControlRequest+0x80>
 bd0:	d1 c0       	rjmp	.+418    	; 0xd74 <HID_Device_ProcessControlRequest+0x222>
 bd2:	cd b6       	in	r12, 0x3d	; 61
 bd4:	de b6       	in	r13, 0x3e	; 62
 bd6:	9d b6       	in	r9, 0x3d	; 61
 bd8:	8d 2c       	mov	r8, r13
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bda:	80 91 e8 00 	lds	r24, 0x00E8
 bde:	87 7f       	andi	r24, 0xF7	; 247
 be0:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();	

				uint16_t ReportSize = 0;
 be4:	1b 82       	std	Y+3, r1	; 0x03
 be6:	1a 82       	std	Y+2, r1	; 0x02
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
 be8:	80 91 aa 01 	lds	r24, 0x01AA
 bec:	00 91 ab 01 	lds	r16, 0x01AB
 bf0:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
 bf2:	f7 01       	movw	r30, r14
 bf4:	47 81       	ldd	r20, Z+7	; 0x07
 bf6:	c4 1a       	sub	r12, r20
 bf8:	d1 08       	sbc	r13, r1
 bfa:	0f b6       	in	r0, 0x3f	; 63
 bfc:	f8 94       	cli
 bfe:	de be       	out	0x3e, r13	; 62
 c00:	0f be       	out	0x3f, r0	; 63
 c02:	cd be       	out	0x3d, r12	; 61
 c04:	08 94       	sec
 c06:	c1 1c       	adc	r12, r1
 c08:	d1 1c       	adc	r13, r1
 c0a:	bc 2c       	mov	r11, r12
 c0c:	ad 2c       	mov	r10, r13

				memset(ReportData, 0, sizeof(ReportData));
 c0e:	c6 01       	movw	r24, r12
 c10:	60 e0       	ldi	r22, 0x00	; 0
 c12:	70 e0       	ldi	r23, 0x00	; 0
 c14:	50 e0       	ldi	r21, 0x00	; 0
 c16:	bc d1       	rcall	.+888    	; 0xf90 <memset>
			{
				Endpoint_ClearSETUP();	

				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
 c18:	40 2f       	mov	r20, r16
 c1a:	41 50       	subi	r20, 0x01	; 1
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
 c1c:	c7 01       	movw	r24, r14
 c1e:	be 01       	movw	r22, r28
 c20:	6f 5f       	subi	r22, 0xFF	; 255
 c22:	7f 4f       	sbci	r23, 0xFF	; 255
 c24:	96 01       	movw	r18, r12
 c26:	8e 01       	movw	r16, r28
 c28:	0e 5f       	subi	r16, 0xFE	; 254
 c2a:	1f 4f       	sbci	r17, 0xFF	; 255
 c2c:	0f db       	rcall	.-2530   	; 0x24c <CALLBACK_HID_Device_CreateHIDReport>
				
				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
 c2e:	f7 01       	movw	r30, r14
 c30:	25 81       	ldd	r18, Z+5	; 0x05
 c32:	36 81       	ldd	r19, Z+6	; 0x06
 c34:	21 15       	cp	r18, r1
 c36:	31 05       	cpc	r19, r1
 c38:	29 f0       	breq	.+10     	; 0xc44 <HID_Device_ProcessControlRequest+0xf2>
				  memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
 c3a:	47 81       	ldd	r20, Z+7	; 0x07
 c3c:	c9 01       	movw	r24, r18
 c3e:	b6 01       	movw	r22, r12
 c40:	50 e0       	ldi	r21, 0x00	; 0
 c42:	9d d1       	rcall	.+826    	; 0xf7e <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 c44:	10 92 e9 00 	sts	0x00E9, r1

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
 c48:	6a 81       	ldd	r22, Y+2	; 0x02
 c4a:	7b 81       	ldd	r23, Y+3	; 0x03
 c4c:	8b 2d       	mov	r24, r11
 c4e:	9a 2d       	mov	r25, r10
 c50:	8e dc       	rcall	.-1764   	; 0x56e <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 c52:	80 91 e8 00 	lds	r24, 0x00E8
 c56:	8b 77       	andi	r24, 0x7B	; 123
 c58:	80 93 e8 00 	sts	0x00E8, r24
 c5c:	94 01       	movw	r18, r8
 c5e:	33 c0       	rjmp	.+102    	; 0xcc6 <HID_Device_ProcessControlRequest+0x174>
				Endpoint_ClearOUT();
			}
		
			break;
		case REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 c60:	80 91 a8 01 	lds	r24, 0x01A8
 c64:	81 32       	cpi	r24, 0x21	; 33
 c66:	09 f0       	breq	.+2      	; 0xc6a <HID_Device_ProcessControlRequest+0x118>
 c68:	85 c0       	rjmp	.+266    	; 0xd74 <HID_Device_ProcessControlRequest+0x222>
 c6a:	cd b6       	in	r12, 0x3d	; 61
 c6c:	de b6       	in	r13, 0x3e	; 62
 c6e:	bd b6       	in	r11, 0x3d	; 61
 c70:	ad 2c       	mov	r10, r13
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c72:	80 91 e8 00 	lds	r24, 0x00E8
 c76:	87 7f       	andi	r24, 0xF7	; 247
 c78:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				
				uint16_t ReportSize = USB_ControlRequest.wLength;
 c7c:	00 91 ae 01 	lds	r16, 0x01AE
 c80:	10 91 af 01 	lds	r17, 0x01AF
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
 c84:	90 90 aa 01 	lds	r9, 0x01AA
 c88:	80 90 ab 01 	lds	r8, 0x01AB
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
 c8c:	8d b7       	in	r24, 0x3d	; 61
 c8e:	9e b7       	in	r25, 0x3e	; 62
 c90:	80 1b       	sub	r24, r16
 c92:	91 0b       	sbc	r25, r17
 c94:	0f b6       	in	r0, 0x3f	; 63
 c96:	f8 94       	cli
 c98:	9e bf       	out	0x3e, r25	; 62
 c9a:	0f be       	out	0x3f, r0	; 63
 c9c:	8d bf       	out	0x3d, r24	; 61
 c9e:	cd b6       	in	r12, 0x3d	; 61
 ca0:	de b6       	in	r13, 0x3e	; 62
 ca2:	08 94       	sec
 ca4:	c1 1c       	adc	r12, r1
 ca6:	d1 1c       	adc	r13, r1

				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
 ca8:	c6 01       	movw	r24, r12
 caa:	b8 01       	movw	r22, r16
 cac:	14 dd       	rcall	.-1496   	; 0x6d6 <Endpoint_Read_Control_Stream_LE>
			{
				Endpoint_ClearSETUP();
				
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
 cae:	48 2d       	mov	r20, r8
 cb0:	41 50       	subi	r20, 0x01	; 1
				uint8_t  ReportData[ReportSize];

				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType, ReportData, ReportSize);
 cb2:	c7 01       	movw	r24, r14
 cb4:	69 2d       	mov	r22, r9
 cb6:	96 01       	movw	r18, r12
 cb8:	12 db       	rcall	.-2524   	; 0x2de <CALLBACK_HID_Device_ProcessHIDReport>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 cba:	80 91 e8 00 	lds	r24, 0x00E8
 cbe:	8e 77       	andi	r24, 0x7E	; 126
 cc0:	80 93 e8 00 	sts	0x00E8, r24
 cc4:	95 01       	movw	r18, r10
 cc6:	83 2f       	mov	r24, r19
 cc8:	92 2f       	mov	r25, r18
 cca:	0f b6       	in	r0, 0x3f	; 63
 ccc:	f8 94       	cli
 cce:	9e bf       	out	0x3e, r25	; 62
 cd0:	0f be       	out	0x3f, r0	; 63
 cd2:	8d bf       	out	0x3d, r24	; 61
 cd4:	4f c0       	rjmp	.+158    	; 0xd74 <HID_Device_ProcessControlRequest+0x222>
				Endpoint_ClearIN();				
			}
			
			break;
		case REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 cd6:	80 91 a8 01 	lds	r24, 0x01A8
 cda:	81 3a       	cpi	r24, 0xA1	; 161
 cdc:	09 f0       	breq	.+2      	; 0xce0 <HID_Device_ProcessControlRequest+0x18e>
 cde:	4a c0       	rjmp	.+148    	; 0xd74 <HID_Device_ProcessControlRequest+0x222>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ce0:	80 91 e8 00 	lds	r24, 0x00E8
 ce4:	87 7f       	andi	r24, 0xF7	; 247
 ce6:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				Endpoint_Write_Byte(HIDInterfaceInfo->State.UsingReportProtocol);
 cea:	f7 01       	movw	r30, r14
 cec:	80 85       	ldd	r24, Z+8	; 0x08
 cee:	3a c0       	rjmp	.+116    	; 0xd64 <HID_Device_ProcessControlRequest+0x212>
				Endpoint_ClearStatusStage();
			}
			
			break;
		case REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 cf0:	80 91 a8 01 	lds	r24, 0x01A8
 cf4:	81 32       	cpi	r24, 0x21	; 33
 cf6:	09 f0       	breq	.+2      	; 0xcfa <HID_Device_ProcessControlRequest+0x1a8>
 cf8:	3d c0       	rjmp	.+122    	; 0xd74 <HID_Device_ProcessControlRequest+0x222>
 cfa:	80 91 e8 00 	lds	r24, 0x00E8
 cfe:	87 7f       	andi	r24, 0xF7	; 247
 d00:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
 d04:	90 91 aa 01 	lds	r25, 0x01AA
 d08:	81 e0       	ldi	r24, 0x01	; 1
 d0a:	99 23       	and	r25, r25
 d0c:	09 f4       	brne	.+2      	; 0xd10 <HID_Device_ProcessControlRequest+0x1be>
 d0e:	80 e0       	ldi	r24, 0x00	; 0
 d10:	f7 01       	movw	r30, r14
 d12:	80 87       	std	Z+8, r24	; 0x08
 d14:	2e c0       	rjmp	.+92     	; 0xd72 <HID_Device_ProcessControlRequest+0x220>
				Endpoint_ClearStatusStage();
			}
			
			break;
		case REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 d16:	80 91 a8 01 	lds	r24, 0x01A8
 d1a:	81 32       	cpi	r24, 0x21	; 33
 d1c:	59 f5       	brne	.+86     	; 0xd74 <HID_Device_ProcessControlRequest+0x222>
 d1e:	80 91 e8 00 	lds	r24, 0x00E8
 d22:	87 7f       	andi	r24, 0xF7	; 247
 d24:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
					
				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
 d28:	80 91 aa 01 	lds	r24, 0x01AA
 d2c:	90 91 ab 01 	lds	r25, 0x01AB
 d30:	80 70       	andi	r24, 0x00	; 0
 d32:	36 e0       	ldi	r19, 0x06	; 6
 d34:	96 95       	lsr	r25
 d36:	87 95       	ror	r24
 d38:	3a 95       	dec	r19
 d3a:	e1 f7       	brne	.-8      	; 0xd34 <HID_Device_ProcessControlRequest+0x1e2>
 d3c:	f7 01       	movw	r30, r14
 d3e:	92 87       	std	Z+10, r25	; 0x0a
 d40:	81 87       	std	Z+9, r24	; 0x09
 d42:	17 c0       	rjmp	.+46     	; 0xd72 <HID_Device_ProcessControlRequest+0x220>
				Endpoint_ClearStatusStage();
			}
			
			break;
		case REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 d44:	80 91 a8 01 	lds	r24, 0x01A8
 d48:	81 3a       	cpi	r24, 0xA1	; 161
 d4a:	a1 f4       	brne	.+40     	; 0xd74 <HID_Device_ProcessControlRequest+0x222>
 d4c:	80 91 e8 00 	lds	r24, 0x00E8
 d50:	87 7f       	andi	r24, 0xF7	; 247
 d52:	80 93 e8 00 	sts	0x00E8, r24
			{		
				Endpoint_ClearSETUP();
				
				Endpoint_Write_Byte(HIDInterfaceInfo->State.IdleCount >> 2);
 d56:	f7 01       	movw	r30, r14
 d58:	81 85       	ldd	r24, Z+9	; 0x09
 d5a:	92 85       	ldd	r25, Z+10	; 0x0a
 d5c:	96 95       	lsr	r25
 d5e:	87 95       	ror	r24
 d60:	96 95       	lsr	r25
 d62:	87 95       	ror	r24
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 d64:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d68:	80 91 e8 00 	lds	r24, 0x00E8
 d6c:	8e 77       	andi	r24, 0x7E	; 126
 d6e:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();

				Endpoint_ClearStatusStage();
 d72:	68 db       	rcall	.-2352   	; 0x444 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
 d74:	0f b6       	in	r0, 0x3f	; 63
 d76:	f8 94       	cli
 d78:	7e be       	out	0x3e, r7	; 62
 d7a:	0f be       	out	0x3f, r0	; 63
 d7c:	6d be       	out	0x3d, r6	; 61
 d7e:	0f 90       	pop	r0
 d80:	0f 90       	pop	r0
 d82:	0f 90       	pop	r0
 d84:	cf 91       	pop	r28
 d86:	df 91       	pop	r29
 d88:	1f 91       	pop	r17
 d8a:	0f 91       	pop	r16
 d8c:	ff 90       	pop	r15
 d8e:	ef 90       	pop	r14
 d90:	df 90       	pop	r13
 d92:	cf 90       	pop	r12
 d94:	bf 90       	pop	r11
 d96:	af 90       	pop	r10
 d98:	9f 90       	pop	r9
 d9a:	8f 90       	pop	r8
 d9c:	7f 90       	pop	r7
 d9e:	6f 90       	pop	r6
 da0:	08 95       	ret

00000da2 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
 da2:	0f 93       	push	r16
 da4:	1f 93       	push	r17
 da6:	cf 93       	push	r28
 da8:	df 93       	push	r29
 daa:	fc 01       	movw	r30, r24
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
 dac:	08 96       	adiw	r24, 0x08	; 8
 dae:	dc 01       	movw	r26, r24
 db0:	85 e0       	ldi	r24, 0x05	; 5
 db2:	ed 01       	movw	r28, r26
 db4:	19 92       	st	Y+, r1
 db6:	8a 95       	dec	r24
 db8:	e9 f7       	brne	.-6      	; 0xdb4 <HID_Device_ConfigureEndpoints+0x12>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
 dba:	81 e0       	ldi	r24, 0x01	; 1
 dbc:	80 87       	std	Z+8, r24	; 0x08
	HIDInterfaceInfo->State.IdleCount = 500;
 dbe:	84 ef       	ldi	r24, 0xF4	; 244
 dc0:	91 e0       	ldi	r25, 0x01	; 1
 dc2:	92 87       	std	Z+10, r25	; 0x0a
 dc4:	81 87       	std	Z+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber, EP_TYPE_INTERRUPT,
 dc6:	22 81       	ldd	r18, Z+2	; 0x02
 dc8:	33 81       	ldd	r19, Z+3	; 0x03
 dca:	01 81       	ldd	r16, Z+1	; 0x01
 dcc:	84 81       	ldd	r24, Z+4	; 0x04
 dce:	88 23       	and	r24, r24
 dd0:	11 f0       	breq	.+4      	; 0xdd6 <HID_Device_ConfigureEndpoints+0x34>
 dd2:	14 e0       	ldi	r17, 0x04	; 4
 dd4:	01 c0       	rjmp	.+2      	; 0xdd8 <HID_Device_ConfigureEndpoints+0x36>
 dd6:	10 e0       	ldi	r17, 0x00	; 0
			                                                     const uint8_t Direction,
			                                                     const uint16_t Size,
			                                                     const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMaskDynamic(Size)));
 dd8:	c9 01       	movw	r24, r18
 dda:	ff da       	rcall	.-2562   	; 0x3da <Endpoint_BytesToEPSizeMaskDynamic>
			                                                     const uint8_t Type,
			                                                     const uint8_t Direction,
			                                                     const uint16_t Size,
			                                                     const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 ddc:	41 2f       	mov	r20, r17
 dde:	48 2b       	or	r20, r24
 de0:	42 60       	ori	r20, 0x02	; 2
 de2:	80 2f       	mov	r24, r16
 de4:	61 ec       	ldi	r22, 0xC1	; 193
 de6:	07 db       	rcall	.-2546   	; 0x3f6 <Endpoint_ConfigureEndpoint_Prv>
	{
		return false;
	}
	
	return true;
}
 de8:	df 91       	pop	r29
 dea:	cf 91       	pop	r28
 dec:	1f 91       	pop	r17
 dee:	0f 91       	pop	r16
 df0:	08 95       	ret

00000df2 <HID_Device_USBTask>:
		
void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
 df2:	4f 92       	push	r4
 df4:	5f 92       	push	r5
 df6:	6f 92       	push	r6
 df8:	7f 92       	push	r7
 dfa:	8f 92       	push	r8
 dfc:	9f 92       	push	r9
 dfe:	af 92       	push	r10
 e00:	bf 92       	push	r11
 e02:	cf 92       	push	r12
 e04:	df 92       	push	r13
 e06:	ef 92       	push	r14
 e08:	ff 92       	push	r15
 e0a:	0f 93       	push	r16
 e0c:	1f 93       	push	r17
 e0e:	df 93       	push	r29
 e10:	cf 93       	push	r28
 e12:	00 d0       	rcall	.+0      	; 0xe14 <HID_Device_USBTask+0x22>
 e14:	0f 92       	push	r0
 e16:	cd b7       	in	r28, 0x3d	; 61
 e18:	de b7       	in	r29, 0x3e	; 62
 e1a:	7c 01       	movw	r14, r24
			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NO_STREAM_CALLBACK);
			
			Endpoint_ClearIN();
		}
	}
}
 e1c:	6d b6       	in	r6, 0x3d	; 61
 e1e:	7e b6       	in	r7, 0x3e	; 62
	return true;
}
		
void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
 e20:	8e b3       	in	r24, 0x1e	; 30
 e22:	84 30       	cpi	r24, 0x04	; 4
 e24:	09 f0       	breq	.+2      	; 0xe28 <HID_Device_USBTask+0x36>
 e26:	85 c0       	rjmp	.+266    	; 0xf32 <HID_Device_USBTask+0x140>
	  return;

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
 e28:	f7 01       	movw	r30, r14
 e2a:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 e2c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 e30:	80 91 e8 00 	lds	r24, 0x00E8
	
	if (Endpoint_IsReadWriteAllowed())
 e34:	85 ff       	sbrs	r24, 5
 e36:	7d c0       	rjmp	.+250    	; 0xf32 <HID_Device_USBTask+0x140>
 e38:	5d b6       	in	r5, 0x3d	; 61
 e3a:	47 2c       	mov	r4, r7
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
 e3c:	47 81       	ldd	r20, Z+7	; 0x07
 e3e:	cd b6       	in	r12, 0x3d	; 61
 e40:	de b6       	in	r13, 0x3e	; 62
 e42:	c4 1a       	sub	r12, r20
 e44:	d1 08       	sbc	r13, r1
 e46:	0f b6       	in	r0, 0x3f	; 63
 e48:	f8 94       	cli
 e4a:	de be       	out	0x3e, r13	; 62
 e4c:	0f be       	out	0x3f, r0	; 63
 e4e:	cd be       	out	0x3d, r12	; 61
 e50:	0d b7       	in	r16, 0x3d	; 61
 e52:	1e b7       	in	r17, 0x3e	; 62
 e54:	0f 5f       	subi	r16, 0xFF	; 255
 e56:	1f 4f       	sbci	r17, 0xFF	; 255
 e58:	b0 2e       	mov	r11, r16
 e5a:	91 2e       	mov	r9, r17
		uint8_t  ReportID     = 0;
 e5c:	19 82       	std	Y+1, r1	; 0x01
		uint16_t ReportINSize = 0;
 e5e:	1b 82       	std	Y+3, r1	; 0x03
 e60:	1a 82       	std	Y+2, r1	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));
 e62:	c8 01       	movw	r24, r16
 e64:	60 e0       	ldi	r22, 0x00	; 0
 e66:	70 e0       	ldi	r23, 0x00	; 0
 e68:	50 e0       	ldi	r21, 0x00	; 0
 e6a:	92 d0       	rcall	.+292    	; 0xf90 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, REPORT_ITEM_TYPE_In,
 e6c:	c7 01       	movw	r24, r14
 e6e:	be 01       	movw	r22, r28
 e70:	6f 5f       	subi	r22, 0xFF	; 255
 e72:	7f 4f       	sbci	r23, 0xFF	; 255
 e74:	40 e0       	ldi	r20, 0x00	; 0
 e76:	98 01       	movw	r18, r16
 e78:	8e 01       	movw	r16, r28
 e7a:	0e 5f       	subi	r16, 0xFE	; 254
 e7c:	1f 4f       	sbci	r17, 0xFF	; 255
 e7e:	e6 d9       	rcall	.-3124   	; 0x24c <CALLBACK_HID_Device_CreateHIDReport>
 e80:	88 2e       	mov	r8, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
 e82:	f7 01       	movw	r30, r14
 e84:	81 85       	ldd	r24, Z+9	; 0x09
 e86:	92 85       	ldd	r25, Z+10	; 0x0a
 e88:	00 97       	sbiw	r24, 0x00	; 0
 e8a:	59 f0       	breq	.+22     	; 0xea2 <HID_Device_USBTask+0xb0>
	}
	
	return true;
}
		
void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
 e8c:	81 e0       	ldi	r24, 0x01	; 1
 e8e:	90 e0       	ldi	r25, 0x00	; 0
 e90:	23 85       	ldd	r18, Z+11	; 0x0b
 e92:	34 85       	ldd	r19, Z+12	; 0x0c
 e94:	21 15       	cp	r18, r1
 e96:	31 05       	cpc	r19, r1
 e98:	11 f0       	breq	.+4      	; 0xe9e <HID_Device_USBTask+0xac>
 e9a:	80 e0       	ldi	r24, 0x00	; 0
 e9c:	90 e0       	ldi	r25, 0x00	; 0
		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, REPORT_ITEM_TYPE_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
 e9e:	6c 01       	movw	r12, r24
 ea0:	02 c0       	rjmp	.+4      	; 0xea6 <HID_Device_USBTask+0xb4>
 ea2:	cc 24       	eor	r12, r12
 ea4:	dd 24       	eor	r13, r13
		
		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
 ea6:	f7 01       	movw	r30, r14
 ea8:	05 81       	ldd	r16, Z+5	; 0x05
 eaa:	16 81       	ldd	r17, Z+6	; 0x06
 eac:	01 15       	cp	r16, r1
 eae:	11 05       	cpc	r17, r1
 eb0:	99 f0       	breq	.+38     	; 0xed8 <HID_Device_USBTask+0xe6>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
 eb2:	4a 81       	ldd	r20, Y+2	; 0x02
 eb4:	5b 81       	ldd	r21, Y+3	; 0x03
 eb6:	8b 2d       	mov	r24, r11
 eb8:	99 2d       	mov	r25, r9
 eba:	b8 01       	movw	r22, r16
 ebc:	53 d0       	rcall	.+166    	; 0xf64 <memcmp>
 ebe:	aa 24       	eor	r10, r10
 ec0:	a3 94       	inc	r10
 ec2:	00 97       	sbiw	r24, 0x00	; 0
 ec4:	09 f4       	brne	.+2      	; 0xec8 <HID_Device_USBTask+0xd6>
 ec6:	aa 24       	eor	r10, r10
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
 ec8:	f7 01       	movw	r30, r14
 eca:	47 81       	ldd	r20, Z+7	; 0x07
 ecc:	c8 01       	movw	r24, r16
 ece:	6b 2d       	mov	r22, r11
 ed0:	79 2d       	mov	r23, r9
 ed2:	50 e0       	ldi	r21, 0x00	; 0
 ed4:	54 d0       	rcall	.+168    	; 0xf7e <memcpy>
 ed6:	01 c0       	rjmp	.+2      	; 0xeda <HID_Device_USBTask+0xe8>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, REPORT_ITEM_TYPE_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
 ed8:	aa 24       	eor	r10, r10
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
 eda:	8a 81       	ldd	r24, Y+2	; 0x02
 edc:	9b 81       	ldd	r25, Y+3	; 0x03
 ede:	00 97       	sbiw	r24, 0x00	; 0
 ee0:	01 f1       	breq	.+64     	; 0xf22 <HID_Device_USBTask+0x130>
 ee2:	88 20       	and	r8, r8
 ee4:	29 f4       	brne	.+10     	; 0xef0 <HID_Device_USBTask+0xfe>
 ee6:	aa 20       	and	r10, r10
 ee8:	19 f4       	brne	.+6      	; 0xef0 <HID_Device_USBTask+0xfe>
 eea:	c1 14       	cp	r12, r1
 eec:	d1 04       	cpc	r13, r1
 eee:	c9 f0       	breq	.+50     	; 0xf22 <HID_Device_USBTask+0x130>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
 ef0:	f7 01       	movw	r30, r14
 ef2:	81 85       	ldd	r24, Z+9	; 0x09
 ef4:	92 85       	ldd	r25, Z+10	; 0x0a
 ef6:	94 87       	std	Z+12, r25	; 0x0c
 ef8:	83 87       	std	Z+11, r24	; 0x0b

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
 efa:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 efc:	80 93 e9 00 	sts	0x00E9, r24

			if (ReportID)
 f00:	89 81       	ldd	r24, Y+1	; 0x01
 f02:	88 23       	and	r24, r24
 f04:	11 f0       	breq	.+4      	; 0xf0a <HID_Device_USBTask+0x118>
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 f06:	80 93 f1 00 	sts	0x00F1, r24
			  Endpoint_Write_Byte(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NO_STREAM_CALLBACK);
 f0a:	6a 81       	ldd	r22, Y+2	; 0x02
 f0c:	7b 81       	ldd	r23, Y+3	; 0x03
 f0e:	8b 2d       	mov	r24, r11
 f10:	99 2d       	mov	r25, r9
 f12:	40 e0       	ldi	r20, 0x00	; 0
 f14:	50 e0       	ldi	r21, 0x00	; 0
 f16:	e4 da       	rcall	.-2616   	; 0x4e0 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 f18:	80 91 e8 00 	lds	r24, 0x00E8
 f1c:	8e 77       	andi	r24, 0x7E	; 126
 f1e:	80 93 e8 00 	sts	0x00E8, r24
 f22:	92 01       	movw	r18, r4
 f24:	83 2f       	mov	r24, r19
 f26:	94 2d       	mov	r25, r4
 f28:	0f b6       	in	r0, 0x3f	; 63
 f2a:	f8 94       	cli
 f2c:	9e bf       	out	0x3e, r25	; 62
 f2e:	0f be       	out	0x3f, r0	; 63
 f30:	8d bf       	out	0x3d, r24	; 61
			
			Endpoint_ClearIN();
		}
	}
}
 f32:	0f b6       	in	r0, 0x3f	; 63
 f34:	f8 94       	cli
 f36:	7e be       	out	0x3e, r7	; 62
 f38:	0f be       	out	0x3f, r0	; 63
 f3a:	6d be       	out	0x3d, r6	; 61
 f3c:	0f 90       	pop	r0
 f3e:	0f 90       	pop	r0
 f40:	0f 90       	pop	r0
 f42:	cf 91       	pop	r28
 f44:	df 91       	pop	r29
 f46:	1f 91       	pop	r17
 f48:	0f 91       	pop	r16
 f4a:	ff 90       	pop	r15
 f4c:	ef 90       	pop	r14
 f4e:	df 90       	pop	r13
 f50:	cf 90       	pop	r12
 f52:	bf 90       	pop	r11
 f54:	af 90       	pop	r10
 f56:	9f 90       	pop	r9
 f58:	8f 90       	pop	r8
 f5a:	7f 90       	pop	r7
 f5c:	6f 90       	pop	r6
 f5e:	5f 90       	pop	r5
 f60:	4f 90       	pop	r4
 f62:	08 95       	ret

00000f64 <memcmp>:
 f64:	fb 01       	movw	r30, r22
 f66:	dc 01       	movw	r26, r24
 f68:	04 c0       	rjmp	.+8      	; 0xf72 <memcmp+0xe>
 f6a:	8d 91       	ld	r24, X+
 f6c:	01 90       	ld	r0, Z+
 f6e:	80 19       	sub	r24, r0
 f70:	21 f4       	brne	.+8      	; 0xf7a <memcmp+0x16>
 f72:	41 50       	subi	r20, 0x01	; 1
 f74:	50 40       	sbci	r21, 0x00	; 0
 f76:	c8 f7       	brcc	.-14     	; 0xf6a <memcmp+0x6>
 f78:	88 1b       	sub	r24, r24
 f7a:	99 0b       	sbc	r25, r25
 f7c:	08 95       	ret

00000f7e <memcpy>:
 f7e:	fb 01       	movw	r30, r22
 f80:	dc 01       	movw	r26, r24
 f82:	02 c0       	rjmp	.+4      	; 0xf88 <memcpy+0xa>
 f84:	01 90       	ld	r0, Z+
 f86:	0d 92       	st	X+, r0
 f88:	41 50       	subi	r20, 0x01	; 1
 f8a:	50 40       	sbci	r21, 0x00	; 0
 f8c:	d8 f7       	brcc	.-10     	; 0xf84 <memcpy+0x6>
 f8e:	08 95       	ret

00000f90 <memset>:
 f90:	dc 01       	movw	r26, r24
 f92:	01 c0       	rjmp	.+2      	; 0xf96 <memset+0x6>
 f94:	6d 93       	st	X+, r22
 f96:	41 50       	subi	r20, 0x01	; 1
 f98:	50 40       	sbci	r21, 0x00	; 0
 f9a:	e0 f7       	brcc	.-8      	; 0xf94 <memset+0x4>
 f9c:	08 95       	ret

00000f9e <_exit>:
 f9e:	f8 94       	cli

00000fa0 <__stop_program>:
 fa0:	ff cf       	rjmp	.-2      	; 0xfa0 <__stop_program>
